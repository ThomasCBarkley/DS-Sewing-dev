%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 9.0
%%For: (x x) (x)
%%Title: (flechas logo with cultures lower version.ai)
%%CreationDate: 7/8/2005 1:18 PM
%%BoundingBox: -155 -87 284 390
%%HiResBoundingBox: -154.6382 -86.918 283.7842 389.7417
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: TimesNewRomanPSMT
%%DocumentNeededFonts: TimesNewRomanPSMT
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: -4.6025 0.7207 -4.6025 0.7207
%AI3_TileBox: -211.1025 -147.2793 364.8975 620.7207
%AI3_DocumentPreview: None
%AI5_ArtSize: 216 288
%AI5_RulerUnits: 0
%AI5_ArtFlags: 0 1 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -324.1025 513.2207 1 1012 671 282 1 1 10 67 1 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-211.1025 -147.2793
%%AI3_PaperRect:-18 780 594 -12
%%AI3_Margin:18 -12 -18 12
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 120 128 8
%%BeginData: 17118 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD31FFAEAE83AE83AEA7AEA7AEA7AEA7AE83AEA7A8A7FD60FFA8A7
%83A883AEFD12FF83A783A783FD58FF83A783AEFD0DFFAEFFCFAEFD0BFF83
%AE83CFFD51FF83A783FD09FF585833332DFFA73333332DA80A2D33AE5882
%83FD07FFA78383CFFD4CFFA883FD06FFAE58587CFFFF5E0BA78258FF332D
%FFFF58A8830BA7CF330B82FFFF83FD07FFA7A883FD47FFAE82A7FD04FFAE
%83332D582D0ACFFFFFFF2D2D0BFFCF0B58FD04FF582DA7A82D33FFFFA72D
%58FFFFFFAEFD05FF82A7FD43FFA8A7A7FD05FF83330B8358AE822DA8FFFF
%FF0B330BFFA83358FFFFAEAE580B837C3333FFFF342D82FFFF58583383FD
%04FFAEA783FD40FF83A8FD08FF582D582DFFA80A83FFAE83330AA833822D
%33A7830A830B33FFFF0A58FF5858332DFFA80B585858FD07FF83A7FD3CFF
%AE83FFFFFFA8FD07FF2D330BAEFF3358FF2D580B332D3358FF5858588358
%580B8333330B5858A73334FFFF333383FD09FFCFA7A8FD38FFA883A8FFFF
%FF832DA7FD06FF580BAEA8A70B0B338282A8A8FD0CFFAEA7823358A8570A
%8358830A33FD06FF2DA7FFFFFFAE83FD36FF83AEFD06FF5858FD06FF5833
%2DAEA7AEFD18FF83822D3383332DFD06FF333358A7FFFFFF83AEFD33FF7C
%FD07FFA8330A83FD05FF5858CFFD1EFFA75833AEFD05FF830BFFA833FD04
%FF8383FD30FFCF83FD08FF8383AE2DFD2FFF2D330BCF83A783FFFFFFCF83
%FD2EFFA783FD06FFA883CF3383A82D0BFD2CFFAE57335858FF58A7FD06FF
%83A8FD2BFFA7A8FD07FF5834A8AE583483FD2DFFA75858FFFFFF0BAEFD07
%FFAEA8FD29FF83A8FD04FF8358A7A833A8AE83FD32FFA8FFFF3358FFAE83
%AEFD05FFA783FD27FF83CFFD05FF7C33A8FF333333FD35FF8333A7583382
%82FD06FFAE83FD25FF83AEFD07FF8333A8AEFD38FFA8FF58AE8358A8AEFD
%05FFAE83FD23FF83AEFD05FF583333FF5858A7FD3AFF8358FFFF583383FD
%05FFAEA7FD21FF83A8FD05FF838357332DAEFD3EFF83823383A78357FD04
%FFA7A7FD1FFFAEAEFD05FF58FFFF5858AEFD40FF3333A7A72D5EFD05FFAE
%A8FD1DFFA8A7FD05FF2D58FFFF5882FD2AFF7D51272D7DFD14FFA70BAEA8
%AEFD05FF83AEFD1CFF83FD05FFAEAE3358A7FD29FF522D042D2727042727
%7D262D27FD0FFF8383FFFF7C83FD05FF83FD1BFF58FD05FF83837CFF0A58
%FD27FFA751AE7D7C0427F8F8F827582D2D5252FD0FFF7C332D8358FD05FF
%A883FD19FF83FD05FFA7838358FFA8FD0AFF27277DFD0AFF52FD0AFF2758
%2D582D582D582D582D27F827F8FD04272DA82D05277DFD0DFF33A70B83FD
%06FFA7AEFD17FFA7AEFD05FFAE58FF57FD0BFFA82D2D2D27FD09FF4BFD08
%FF7D272DF827042D042704270427F827F8F8F827F827045158270427FD0E
%FF5783FF3333CFFD04FF83FD16FFAEA7FD07FF585883FD0BFF27042DF827
%2627762751FFFFFF4BB5FD07FF522D27042D275804512751262D5127F827
%F827F8272727042D27FF2D83FD0DFFCF33A70B8383FD05FF83FD15FF83FD
%04FFA8823358FD0CFFA827F82D0405F805F82D272D2D51FF4B8CFD05FF7D
%2D047C7D7D27FF58FFA7FFA827F82D0404F8000405F8272727F827042751
%FD0EFF835733FD07FFA8A7FD13FFAEA7FD04FF83A7FF33FD0CFF7C272D04
%27F827F8272D2704272D2D68B5FD04FF7D7D2DFD09FF272D04270527F827
%F82D042D272751832627262727FD0FFFA8FD08FFA7FD13FF83FD04FFAE0A
%33A88283FD0AFF5104272658042DF805F82D2D27042704686852FFFF52FD
%09FF27270427F827F8A805F8F8270427F827F82DF87C5127272D04FD10FF
%585883AE83A7FFAEA7FD11FFA7FD05FF58FF583333FD0AFF582D27048327
%2DF827F827F8582D7C04278C9326FD0BFF522D272D04272751F827042727
%2704270427042D27FF2D7C2D2DFD10FF2DAE7C832D58FFFF83FD11FF83FD
%04FFA783FFFF83332D82FD06FF522D042751272D2D2D270427F82704272D
%A726938D2027FD09FF4B2DF827F8A85858F827F827A87DF827F827F82727
%2DF8A8A87CA82DA8FD0DFF8358A8580A83FD04FF83FD0FFFA8CFFD04FF33
%0B83A7FFFF33A8FD05FF7D58FD052D27A88304272727047D512704FF68B5
%2083FD08FF522704525258515227272752F8FF58272727042D522D042D27
%FD13FF583357FD06FFA8CFFD0EFF83FD06FFAE2D33A8FFA8FD06FF2DCFFF
%042D0427A75104275852F827042D5227526FB54BFD08FFA7270452FFFFFF
%7C042704FFF8A8FFFFF8270427042DFF27042D27FD12FFA733AE7CCFFD05
%FF83FD0DFFA7FD05FFA75833AE83FD0BFF7D83277CFF7DA82783FF2727A8
%270451FFFF20B544FD07FF7C2758CFFFFFFF7D042D04272727FFFFFF7CF8
%51042D0427FF27272DFD14FF82582D82FD04FF83FD0DFF83FD04FF588283
%2D83FD0DFF2D58FFFFA8FF2DFFFF27F8FF272D04FFFF278C4BFD07FF5858
%A8FD04FFF827272D582727FD04FF272D27042704FF7CA704FD14FF33A858
%58FD05FF83FD0CFFA8FD04FFCF58FF57AEFD0CFF5151FD05FFAE52FF2727
%FFFFFF83FFFF52B58CFD0DFF52272D52FFA827FD04FFCA04A87D52052DFD
%18FF7CA8A8FD06FFA7FD0BFF83FD06FF330B33FD0CFF7D2DFD07FF277D27
%20FD06FFA844B576FD0DFF04FFFF7D2027FD04FF2727FFFFFF270483FD18
%FFA8FD04FFAE83FFA8AEFD0AFFAEFD04FF58CFA8AEFD16FF4B52274BFD07
%FF525252FD10FF2751A8FFFFFFA8767DFD04FF2D7CFD1BFFAEA73358FFFF
%83FD09FFAEA8FFFFFF8358FFFF58FD16FF9A20274BFD07FF7DA727FD08FF
%52275104277CFF272727FD04FF524BFD05FFA8FD19FF8358570B0B5E33FF
%FFA7FD09FF83FD04FFCF0B825783FD16FF766F4B7DFD08FFA87CFD04FFA8
%7D5252272D272704272D27277DFD04FF276FFD20FF2D5EA7FD05FFAEAEFD
%08FFA7FD05FF8358AEFD17FF4B8C277DFD08FFA85252A85204270427F827
%0427F827042720587DFFFFFF4B9327FD20FF82AEFD07FF83FD07FFAEAEFD
%04FF837CAE83FD17FF27B520FD09FF527D27FF58515158CFA70427042704
%2D26270427FFFFFF6FB57CFD20FFA883FD07FFAEFD07FF83FD04FF5E3358
%0A83FD17FF27934BFD09FFA77D52FD04FFA827042D2700F805F84B042DF8
%27FFA88D6FA8FD21FF2D585883FD04FF83FD07FFAEFD04FF58A8FFAEA8FD
%17FF4B9368FD0AFFA8527DFFFF272D2D582DFD0527202D582D05A8276F4B
%FD23FF2D330B83FD04FF83FD06FF83FD04FF330B332DFD18FF7C4B6FA8FD
%09FF7D7C27FFA82D2D2DAE27F82D2727202704A80427524B444BFD22FF83
%33AEAE2DFD04FFA7FD05FFAEAEFFAEA8FFA8FF8258FD18FF5127B04BFD09
%FF527D527C2DFFFFCF4B27A85127272704CAFFFFFF7CB59352FD06FF76FD
%1BFFCF2D823358FD04FFA7FD05FFA7FFFF5833578383A783FD18FF27F8B5
%68FD09FFA87D2727FFFFCA272752FF52F84B272727FFFFFF277C27FD06FF
%A898FD1CFF832D58A7FD04FFA7FD05FFA7FFFF5E838333330BAEFD18FF27
%27277C52FD09FF7D7C52FFFF4B274BFFFF274B52FFF82DFFFF527D52FD05
%FF52522727FD1CFFA7AEA75E8383FFFFA8FD05FFA7FD07FF58FD19FF4B20
%4B7C27FD09FF527C52A8522727A8FF522720FFFF2D04FFFF275852FD04FF
%276F8CB520FD1CFF830A5858A88258FFFF83FD04FFA7FD20FFA84B27A1A8
%52CFFD08FF7D7D7C272727FFFFA84B27FFFFFFA82DFFA87D277DFFFF4B8C
%7C8C93FC4BFD1CFFA8A7FFFFA8FD04FFA7FD04FFA7FD20FF274B20FF527D
%27A8FD08FF7D7D5227FFFFFF2726A8FD04FF277D277D27A844B0FCFC27FF
%7CFC27FD1DFF0B82A858FD04FF83FD04FFA7FD06FFA70BCFFD17FF4B2752
%FFA7A85251FD08FF4B835252FFA7272652FD06FF527D277DFF4BFC6FFF76
%4BB5FC52FD1DFF58583333FD04FFA8FFFFFFA8AEFD04FFA8AEAEFF83FD17
%FF20277DFFFF527C5227FD06FF27F827525227270427F852A8FFFFFF277D
%2727FFFF20B5FCFC684B442752FFFFFF527CA8FD17FF33A7A858FD04FFA7
%FFFFFFAEFD04FFA8330B58FD18FFA84BF8FFFFFF52A87C52FD05FF7D4B27
%F87D522D042D042D042727FF7D7D52524BFFFF4BFCB56827277D767DFFFF
%A8592752FD17FFAE83FF58FD04FFAEFFFFFF83FD04FF5858AE2D83FD17FF
%522052FD04FF52A75127FFFFFF524B270427527C2726042704260427047D
%527D27FFFFFF27B04BFD04FF52A7FFA82E27282FCFFFFFA87D767CA8FD0F
%FF33588382A8FFFFFF83FFFFFFAEFD04FF5858835883FD17FF274BA8FD04
%FFA8517D517CFF524B2D042D04277C7D27525252042D047D525227FD04FF
%7C7DFD05FF51FFFFFF84A0C751A87D7BA5515126A5FD0FFFA7583333FD04
%FFAEFFFFFF83FD04FFAE0B0B2DFD17FFCF4B20FD07FF7C7D51272627042D
%04272D7D525151AD838383275252F8277CFD05FF27FD04FF4BFD04FF4B27
%4BA7575156A580AB5151277D27FD0BFF575858AEFD04FF83FFFFFFAEFD04
%FF7CFFFFFF7C83FD15FF762727FD07FFA87D7D7C27042D277C58AC525251
%A0838983837D27272D042DCFFD04FF7EFD04FF27FFFFFF7C282827525151
%7B7B51517D51522752FD0CFFAEFD06FFAEFFFFFF83FD04FF580BAE830B0B
%83FD14FF272720FD08FF527C52F82704837583A58358A883AC838357587D
%83F8270452FD04FF2EFD04FF4BFFFF272E2E28282F27277B7C2752522752
%5151FD0BFFA8FD07FF83FFFFFFAEFD04FF588358A733FF7CFD14FF27267D
%FD07FF512752262D275883AD2DAE83CC83AEFE83AC93835252AD042D27FD
%04FF5252FFFFFF27FF2E59285A2F2F272E517C527C275251525252FD0BFF
%5E5883A7AE58AEFFAEFFFFFFA7FD04FFAE2D330B582DFD15FF2627A8FD05
%FF52272627FF270483758383AEA5A783588351F8277C99837D5127042D27
%FD04FF2EFFFFFF272E2F002F002F052F0652522752522727525252FD0BFF
%33572D330B0BA7FF83FFFFFFAEFD05FFAEA8A7FFAEFFFFCFFD11FF512726
%FD05FF274B2627FFFF2752838A0427F8277C83F8272D8958AD8383765158
%510427FD04FF27FFFF7D2F2852FFA82F2F2E2E525252517D517D277D5252
%FD0BFF5EFF5833FF58FFFFAEFD04FFA8FD04FFA7580B83FFFFA7A1A0A076
%522727275227524B5251525252272720277D7D7DA8F84B2027527D522783
%A783AD58587D27F88382A6588382838352FF52A62D04FD04525151272727
%7C7D527D0528055327525152277C5227F827512D272E272E2D2E2DFFFFFF
%2DA88383582DFFFF83FD04FFA7FD04FF5833A783FFFFFFC9CFC9CFC9C951
%2E34593459345934593427274B27582E58274B27272E582E59278A828383
%8358AEA0AE83AE8358839A838A52FF27A0262D2E5F595F5875F82E275934
%59582E2E285252527D277D527D2D2E527D355F355F595F355FFFFFFF837C
%FFFFAE7CFFFFAEFD04FFA7FFFFFFCF58AE2D58FFFFCFCAC9C9A7C951C9A1
%A127343459343434592027F8593458F82720273459345904278383512DA6
%AC27AD838358278358F82734A8FF7D2727042E355935592759342E355935
%5927938C524B27277D587D522D2752275934593459345959FFFFFF0B83A7
%82FD04FF83FD04FFA7FD04FF83FFCF7CFFFFFFC9CAC9A0A7CAC97676C9A0
%C3A0C9A07D27272027342E2727202D355934590551F8595858F87D83A127
%AC83AE27830027587CFFFFFF52272D275F3559355F59582E5F595F2EB5FC
%93277D27277C7D7C7D275F3559345F355934593583FFFFA758583358FD04
%FFA7FD04FFA7FD04FFA782570BA8FFFFC9A0C9765175C9A0C3A0C3A0C2A0
%C97D27202727272027202E2E593435054B262727AC8227F8A852A882AE27
%27512783CC27FFFFFF5227042E3459355934592735355F274B8C93684B27
%27514B2052264B2E59343534593435345983FFFF83A7FF58A7FD04FF83FD
%04FF83FFFF82A75858A758AEFFFFA176A0C9C2C9C9C9C3C9C3C9C2C9C2A7
%4B7676A0C3C94B2E355F3559274B274B27275858517CA67DFFA0582727A7
%588327FD04FFA7272D345F355F355F352E59602E27514B99C8274B267D7C
%7D27512752355F345F3559355F59AFFFFF58333333A8FFFFFFA7FD05FFA8
%A8FFAEFF83CFFFA858FFFFA8C2C9C2C9C2C9C3C9C2C9C2C2C2C951522027
%A0C9A0C97C2E3459272720272059F883278383AE7DFF5252F8A15258277C
%FD04FF7C27045934593559355927592E27272720C275272727527D527DF8
%5227593459345934593459FFFFFFA7AEA8A8FD04FFA7FD06FFAEFFFFFF83
%33332DCFFFFFFFFD05C9C2C9C2C9C2C9C2C9C2C97CC9C2C9C3C9C2C9C951
%2D2720272059592751FF275227FFFF522727FD09FF522627355F355F595F
%3427275252514B4B2E5A274B4B7D7C7D7C7D2752522E2E2E2D582D2E52FD
%0BFF83FD06FF83FFFFFF5858A7FF83FFFFFFC9C9A0C9C2C9A0C9C2C9A0C9
%C2C9A0C9C2C3A0C9C2CAA7C92727F827205151512727FD06FF2727F8FD08
%FF7D522D275F595F595FA77D277D277C27514B4B002E207C527D5852524B
%272D527C525252CDCECFFD04FF83FD06FFA7FD06FFA8FD05FFCF583383FF
%FFCFFD04C9C3C9C3C9C2C9C2C9C2C9C9C9C2C9C9CF7D51274B204B2051A0
%C827A0A8FD06FF522727FD08FF7CA626FD05CEA0FF527C27527C52517627
%534B527CFD047D762751275251A6A55275CDCFFFFFA70B330B82FD04FFA8
%FD06FF83FD05FF2D83A783FFFFCFA1A0C9C3C9C2C9C2C3C2C9C2C9C2C9C2
%C3A0A7A7514B272027204BA0279F7B58FD07FF582DF8A7FD04FF272782A7
%2727C8FD04CD7C5252277C2751272751280527277C517D7C7D7C7D5251C8
%CDC8CD9F7DC8FFFFCF58FFA8830B83FFFF83FD08FF83FFFFFFA858AEAE2D
%FFFFFFA7A1FD04C9C2C9C3C9C2C9C2C9C3C9C37676CA4B76204B204BC8C9
%A04BA5A5FD07FF83522727FFFFFF7D2783AE582751CDCDCECDCE52522752
%7C274B52527C2752274B7C4B517D527D7C7D517CC8CDCDCD51CFFFFFA7FD
%04FFAE58FFFFAEFD08FFA7FD04FF580B2D3383FFFFCF76C9A0C9A0C3A0C3
%C2C3A0C9C2C9A0C9517CA0CA4BA027A0A0C9A0C975A07CFD06FF7D58CC51
%27F827F8277CA8832704CDCDCDA6CDCD277D7C4B7D277C20272727F82727
%CDC87B517551757B757CCDA5CDC8A6A8FFFF837CFFFFFFA85EFFFF83FD08
%FF83FD04FF8383FF835EFFFFFFCAFD04C9A0C976C9C2C9C3C9C3C9C9A751
%76C9C951767CA7C3C9C951837C522752FFFFFF58AE58AE7C2751AD83A783
%83262DCDCECDCECDCE7C27A6CE7CA152279F27275220CDCDCECDCEFD05CD
%5151CDC8CDC9FFFFFFA75EAEFF8334AEFF83FD09FFCFA7FD05FF573333FF
%FFFFCAC9C2C9A0C9A0C9C3C9C2C9C2C9C2C9C2C9C2C9C3C9A0C9C9C9C8C9
%27CCA58382A6515127A77C835283F8AD272783AC262D04FD06CDA052CECD
%5176527BCD26525151C8CEFD04CDC8C8C7CDC87CC8CDC8CFFFFF832D0AFF
%FF8258FFFFA7FD0AFFAEFD04FFA8582D8258FFFFFFC9C9A1C9277CC3C9C3
%C9A0C9C9C9C2C9C9C9C3FD08C9767CAE83AE273483832727F88383ADF827
%F889832D2627C8CECDCDCDCECDFFCDCE517C7BCECDCE5252CDCEC8CEC8CD
%9FC89FC8C8CD4B51C8CEFFFFFF33838283FD05FF83FD0AFF83FD04FFA758
%AE58A7FFFFFFCFC3C9A05127C9A0C9C2C3A0C9C2C9A0C9C2C9A0C9C3C9A0
%C9C9C975832D83832758838327F88383832627F8277D83042D26CDA6CDCD
%CDA6CE7CCDA6A727CDA6CECD5226CDA5C89FC79FA59FA5C8CDA55126C8CA
%FFFFFF0AA88358FD04FF83FD0CFF83FD04FFAEA88383FD04FFC9C37CA0C9
%C3C9C3C9C3C9C9C9C3C9C9C9A0FD09C927A783832627F85283755127F827
%F82D83AD272D26A6CDCECDCECDCECDCECDCE51CECDCECDC852CECDCECDCE
%CDCECDCDC8C8A5C8C8A6CEFFFFFF835E2D82A8FD04FFA7FD0CFF83FD04FF
%AEFF0B8333FFFFFFCAC9C2C9C2C9C2C9C2C976C9C2C9C2C9C2C9C2C9C2C9
%C2C9C9C9C8C97C838383F8272727F821F82727277CAD83270451C8CDC8CD
%CDCDACCECDCDC85127CEACCECD5226CECDCDA6CECDCDA6CDC8CDC8CDCDFF
%FFFF832DA7FD06FFAEA8FD0CFFA8AEFFFF335E8333FF5883FFFFFFC9C9C2
%C9C8C9C2C9C276A0C9C2C9C3C9C9C9C3FD09C927AE837C52FFF827F8277D
%FF83A0582D262D2675CDCDCDCECDCECDCECDCECD7DCDCECDCECD527BCECD
%CECDCEFD07CDCFFFFFAE83583333AEFD04FF83FD0EFF7CFFFF83835858FF
%0BA7FD04FFC2C9A0C9C2C2A0C9267CA0C9C2C9A0C9C3C9A0C9C3C9A0C9C9
%C9A0C97CAC4A7C277C2D5858277D832727042D7CA0767626CDA6CECDCDA6
%CDC8CE51C9CDCDA6CEA64B26CEC8CDA6CDCDCDA6CDCDCDCFFFFF8233FF83
%58A8FFFFFFA8A8FD0FFFA7FFCF8333AEFFFFFFAEFFFFFFCFC2C9C3C9C2C9
%C2517CC9C2C9C3C9C9C9C3A17CFD06C9CAC94B83AE527CA7A1A6AE83527C
%27042D26C9A1C9A07C27CECDCDC8CDC8CDCD76CECECDCECDCE26277BCECD
%CEFD06CDCFFFFFFF57343358A7FD04FFA7FD10FF83FD08FF2D83FFFFFFC9
%C2C9C2A076A075512651C2C9C2C9C3C9A0FD0AC92783AD83AD83AE83A693
%83042726C9C9C9C3C9A1A7764B7BCDC8CDC8CD4B27CDCEA6CDC8CDA6CEFD
%06CDC8CDCEFFFFFF33A7FFA7A8FD04FFAE83FD10FFA8AEFD05FFA72D5858
%CFFFFFFFC9FD05A0C9A1A17C7C51A7A1FD08C9CAFD05C94B7C83ACA07CAE
%83AD26277CC9C9CAC9C9C9CAC9C9A1C94B75C8CECDCE7BCECDCECDCECDCE
%CDCECDCECDCECDCDCEFFFFFFA7582D83A8FD05FF7CFD12FF7CFFFFFFA858
%0BA7FF5858FFFFFFCAC9A0C9C2C9A0C9A0C3A0C9A1C9A1C9C9C9A7C9C9C9
%A7CAC9C9A7C9C9C927AE83A783832776A7C9C9C9A7FD04C9CAC9C9A1C9A1
%76274B75CDA6CECDCEA6CECDCDA6CEC8CDA6CDC8FFFFFFA733FFAE0A58FD
%04FF83CFFD13FF83FFFF5833FFFF5E338358FFFFFFCAFD0CC9CAC9C9C9CF
%C9CAC9CFC9CFC9CFC9CFC9CF7C2727517CC9C9CFC9C9C9CFC9CFC9CFC9C9
%C9CFC9CAC9CAC9C9A77C514B2652517676A07CA17CA7A7FD04FF832D5883
%83FD05FFA7FD14FFAEA8FFA8AEFFFF2D582D33A8FFFFFFFD15C9CAC9CAC9
%CAC9C9C9CFFD0BC9CFC9C9C9CAA0CAC9CAC9C9C9CAC9C9C9CAA7514BCFC9
%CFC9CFCACFC9FD07FF5883A8FD04FF83A8FD15FFA7FD05FF8283FFFF34FD
%4BFF832D337CFD06FFAEA7FD16FFA883FD05FFAEFF830BFD4BFF58FF5883
%FD06FF7CFD18FFA7AEFD04FFA73433AE82A7AEFD49FF835858FD05FF83FD
%1AFF83FD04FFA72DAEA8338333FD45FFA8575883AEA8FD05FFA7AEFD1BFF
%82FD05FF83580BCFA8FD45FF58FFFF83FD06FFA8AEFD1DFF7CFD05FF5882
%A7335858FD41FF8358FFFFFF58FD05FFA883FD1FFF83FD07FF57FF33FD04
%FFAEA8FD3AFF82585E33FF82CFFD05FF83FD20FFAE83FD06FF585833FD04
%FF832D83FD38FF580BAEFF582DFD06FF83AEFD21FFAE83FD05FFA7AEA7A7
%2D58583382FD37FFA8FFFF8333AE5858FD05FF83AEFD23FFAE83FD07FF58
%A8FF3357A7FD36FF83582D2DFF582DFD06FF83A8FD25FFCF83FD06FFAE83
%5E33FF2D58CFFD32FFAECFCFFFFF33FFFFFF83FD04FF83FD28FFAE83FD05
%FFA8830BA8FF2DA8FF83FD2FFFA783332D83FFA758FFFFA883FFFFAE83A8
%FD29FFAE83FD06FFAEAECF0BA7FF582DFD2EFF580BAE8333A7A7AEFD05FF
%AE83FD2DFF7CFD07FF8333833383FFFF5858FD28FFA82D58FF3358FF3382
%FD06FFA783FD2FFF83CFFD05FF83335EA8FFFFFF33583383A7FD21FFCF83
%83FFFFFF2DA7A83383FD07FF83AEFD31FF8383FD04FF5858A8FFFFFFA733
%AEFD0458FD1DFFA883A858572D58FFFF832DAEA8FD07FF7CFD34FFAE83AE
%FD08FF5858FF2D5858FFFFFF3358A7FD15FFAE8358820BFFAEFF5858FFFF
%5833FD07FFAE83FD37FFA883FD06FFCF0AFFFF58A7A8FFFFFF832DA80B2D
%0BCF8382A7A8A7FFA8A8FFAE83A7A8A72D58A8FF5758FF3383A72D3357FF
%FFFFA8FD05FFA883A8FD3AFF83AEFD04FF8333FFFFAEA8A8FFAEFF33A758
%58CF3458832DCF2D8283333333A85833FFFF587CFFFFCF2DAE2D58FFFF83
%FD09FF83AEFD3DFFA883A7FD0AFFA758337C582DFF2D825858FF58A73358
%FF2D837C58FFFF5858FFFFFF830B827CFD0AFFA782FD42FF83AEFD0CFFAE
%582D58A8AE2D830BFF5834A73383AE0B83585833FD0FFF83A7FD45FFA883
%83FD10FFA7835883AE333358FF830BFFFF832DFD0CFFA88383FD4AFF83A7
%A8FD17FF0BAEFF820B83FD09FFA883AEFD4EFFAE8383A8FD13FF7C827CFF
%A8FD07FFAEA783A7AEFD54FF83A783AEFD18FFA7A783AEFD5BFFA8A783A7
%83A883FD0BFFA8A883A8838383FD66FFA7AEA7A8A7AEA7A8A7AEA7AEFDB1
%FFCFFFFFFFAE83AEFD10FFA7AEFFFFA7FD0BFFA8AE83FD12FFAEFD0CFFA8
%83CFAE83AEA883FD0EFFA8FD04FFAEA8FD11FFAE58FFFFFF83A7A7A7FD08
%FF7CFD06FF83A882FD0DFFA883FF83FD1EFF82A8FF83A783A858FD0CFF83
%A8FF58FFFFFF83A77CFD10FFA783A8FFFFAEA7CF828383AE838383828382
%A8A782AEFFFF58A783FF58FF7C8382AE7CA78283FFFFA78383FF82A783A7
%82837C8383A758CFFD0483AE83A8AE82AE5883AEFFA8AE82FF58FFFFFFA7
%AEFF83A7FD0483AE58AEA782FFFF7CFFFFFF58FF58AEA782A883A88358A7
%A8AE58837CFD05FF838383FFFF8383A8FF58A7835E83AE58FF58A783FF58
%FFFF8358FFFF8383A7FFAE838283A858FFFFA883AEFFFF57FF83A883A783
%A858A7A783828358FF5883FFA8838383A8FF83FFA88383FFFFFFA783FF58
%FF58A883A758A858A783FFFF83FFFFFF83FF8383A758FF58FF5883FF8383
%A78382A8FFFFFF83A8FF58CFFF8383FFFF8382835883A85EFF83A88383FF
%FFCF58FF58AE58FF58837CA758838383AEFF8383A7837CFF58A77C838383
%AE8282A783838283A882A88383FF58A783FFA88383FF58FFFFFF8383FF82
%AE5E7C83CF5E7CAE5883FFFF83A783AE83A758838383A883A75E58FFA85E
%838383CFFD33FF83A7FD76FFAEA7FDFCFFFDB1FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: TimesNewRomanPSMT
userdict /_useSmoothShade true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _TimesNewRomanPSMT TimesNewRomanPSMT
[/_TimesNewRomanPSMT/TimesNewRomanPSMT 0 0 0 TZ%AI3_EndEncoding TrueType
%AI5_Begin_NonPrinting
Np
13 Bn
%AI5_BeginGradient: (Black, White Radial)
(Black, White Radial) 1 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 0 1 50 0 %_Bs
0 0 0 1 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Emerald Eye)
(Emerald Eye) 1 3 Bd
[
<
E4E4E4E4E5E5E5E5E5E5E5E5E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8
E8E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
ECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEE
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEF
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0
>
<
7675737271706E6D6C6B6A68676665646361605F5E5D5C5B5A595857565554535251504F4E4D4C4B
4A4948474646454443424141403F3E3D3C3C3B3A39393837363635343433323131302F2F2E2E2D2C
2C2B2A2A292928282726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1B1A1A19191818
181717171616151515141414131313121212111111101010100F0F0F0E0E0E0E0D0D0D0D0C0C0C0C
0B0B0B0B0B0A0A0A0A0A090909090908080808080807070707070706060606060606050505050505
05050404040404040404040403030303030303030303030302020202020202020202020202020202
01010101010101010101010101010101010101010101010101010101010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000
>
<
F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F9F9
F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFBFB
FBFBFBFBFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFD
FDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE
FEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
9896959391908E8D8B8A8886858382807F7E7C7B79787675747271706E6D6C6A6968676564636261
5F5E5D5C5B5A5957565554535251504F4E4D4C4B4A49484746454443424241403F3E3D3C3C3B3A39
3837373635343433323131302F2F2E2D2D2C2B2B2A2929282727262625242423232222212120201F
1F1E1E1D1D1C1C1B1B1A1A1919181818171716161615151414141313131212121111111010100F0F
0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0B0A0A0A0A0A090909090908080808080707070707070606
06060606050505050505050504040404040404040403030303030303030303030202020202020202
02020202020202020101010101010101010101010101010101010101010101010101010000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000
>
1 %_Br
<
F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEDEDEDEDECECECECEBEBEBEAEAEAEAE9E9E9E8E8E8E7E7E6E6
E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDBDBDBDADAD9D9D8D8D7D7D6D6D5D5
D4D4D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C8C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BF
BFBEBEBDBCBCBBBBBAB9B9B8B8B7B6B6B5B5B4B3B3B2B1B1B0B0AFAEAEADACACABAAAAA9A8A8A7A6
A6A5A4A4A3A2A2A1A0A09F9E9E9D9C9C9B9A9A99989797969595949393929190908F8E8E8D8C8B8B
8A89888887868685848383828180807F7E7D7D7C7B7A7A797877767675747373727170706F6E6D6C
6C6B6A696868676665646463626160605F5E5D5C5C5B5A5958575756555453535251504F4E4E4D4C
4B4A4948484746454443434241403F3E3D3C3C3B3A39383736363534333231302F2F2E2D2C2B2A29
282727262524232221201F1E1E1D1C1B1A19181716151414131211100F0E0D0C0B0A090807070605
0403020100
>
0
<
FFFFFFFFFFFEFEFEFEFEFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F9F8F8F8F7F7F7F6F6F6F5F5F4
F4F4F3F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECECEBEBEAEAE9E9E8E8E7E7E6E6E5E5E4E4E3E3E2
E2E1E1E0E0DFDEDEDDDDDCDCDBDBDADAD9D8D8D7D7D6D6D5D4D4D3D3D2D1D1D0D0CFCECECDCDCCCB
CBCAC9C9C8C8C7C6C6C5C4C4C3C2C2C1C0C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1
B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999998979696959493
939291908F8F8E8D8C8C8B8A898888878685848483828180807F7E7D7C7B7B7A7978777676757473
727171706F6E6D6C6C6B6A6968676666656463626160605F5E5D5C5B5A5959585756555453525151
504F4E4D4C4B4A49484847464544434241403F3E3E3D3C3B3A39383736353433323130302F2E2D2C
2B2A292827262524232221201F1E1D1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605
0403020100
>
0
1 %_Br
[
0.8941 0.4627 0.9608 0.5961 1 16.2162 28.6517 %_Bs
0.9412 0 1 0 1 61.5385 64.6067 %_Bs
0 0 0 0 1 50 78.6517 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2
D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAA
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878685848382
81807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938373635343332
31302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A
0908070605040302
>
0.9882
<
05050505050505050505050505050505050505050505050505050505050505050505050505050505
05050606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606070707070707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707070707070707070707070707070707
07070707070708080808080808080808080808080808080808080808080808080808080808080808
0808080808080808
>
0
1 %_Br
<
E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEB
EBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1
F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4
F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9
>
<
1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B
3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263
6465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B
8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3
B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADB
DCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC
>
<
09090909090909090909090909090909090909090909090909090909090908080808080808080808
08080808080808080808080808080808080808080808080808080808080808080808080808080808
08080808080808080707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
060606050505050505050505050505050505050505050505050505050505050505
>
0
1 %_Br
<
ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8
>
<
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414
>
<
EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8
C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09
>
0
1 %_Br
<
08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F
303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555657
58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC
>
<
05050505050505050506060606060606060606060606060606070707070707070707070707070707
070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A
0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101010101010111111111111111111111111
1111111112121212121212121212121212121212131313131313131313
>
<
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECEC
ECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
0
1 %_Br
<
03030303030303030303030303030303030303030303030304040404040404040404040404040404
04040404040404040404040404040404040404040404040404040404040404040505050505050505
05050505050505050505050505050505050505050505050505050505050505050505050505050505
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707080808080808080808080808080808080808080808080808
08
>
<
F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCE
CDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6
A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E
7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
5554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E
2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706
05
>
0.9137
0
1 %_Br
[
0.0078 0.9882 0.0314 0 1 50 100 %_Bs
0.9765 0.9882 0.0196 0 1 50 80 %_Bs
0.9098 0.0784 0.0353 0 1 50 60 %_Bs
0.9255 0.0745 0.9373 0 1 50 40 %_Bs
0.0314 0.0196 0.9137 0 1 50 20 %_Bs
0.0118 0.9608 0.9137 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Steel Bar II)
(Steel Bar II) 0 3 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A
>
0 %_Br
<
1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041
42434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566676869
6A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F9091
92939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1
E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0 %_Br
[
0.1 0 50 100 %_Bs
1 0 50 39.8876 %_Bs
0.1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Sunset)
(Sunset) 0 5 Bd
[
<
EEEDEDECECEBEBEAE9E9E8E8E7E6E6E5E5E4E4E3E2E2E1E1E0DFDFDEDEDDDDDCDBDBDADAD9D9D8D7
D7D6D6D5D4D4D3D3D2D2D1
>
<
3534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E
0D0C0B0A09080706050403
>
1
<
807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160605F5E5D5C5B5A
595857565554535251504F
>
1 %_Br
<
08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F
303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555657
58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE
>
<
050505060606060607070707080808080809090909090A0A0A0A0A0B0B0B0B0B0C0C0C0C0D0D0D0D
0D0E0E0E0E0E0F0F0F0F0F1010101010111111111212121212131313131314141414141515151515
161616161717171717181818181819191919191A1A1A1A1A1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E
1E1E1E1F1F1F1F1F2020202021212121212222222222232323232324242424252525252526262626
2627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2D2E2E2E2E2F
2F2F2F2F303030303031313131313232323232333333333434343434353535
>
<
E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECEDEDED
EDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F1
F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4
F4F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8
F8F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFC
FCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFF
>
<
0001010202030304040506060707080809090A0B0B0C0C0D0D0E0E0F101011111212131314151516
161717181819191A1B1B1C1C1D1D1E1E1F2020212122222323242525262627272828292A2A2B2B2C
2C2D2D2E2F2F3030313132323334343535363637373839393A3A3B3B3C3C3D3E3E3F3F4040414142
434344444545464647484849494A4A4B4B4C4D4D4E4E4F4F50505151525353545455555656575858
59595A5A5B5B5C5D5D5E5E5F5F6060616262636364646565666767686869696A6A6B6C6C6D6D6E6E
6F6F7071717272737374747576767777787879797A7B7B7C7C7D7D7E7E7F7F
>
1 %_Br
<
33333232323231313131303030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A29292929
282828282727272726262625252525242424242323232322222221212121202020201F1F1F1F1E1E
1E1E1D1D1D1C1C1C1C1B1B1B1B1A1A1A1A1919191818181817171717161616161515151414141413
13131312121212111111101010100F0F0F0F0E0E0E0E0D0D0D0D0C0C0C0B0B0B0B0A0A0A0A090909
090808
>
<
A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180
7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958
57565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39383736353433323130
2F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908
070605
>
<
F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1
F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEE
EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECEC
ECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9
E9E9E9
>
<
1111111111101010101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D
0D0D0D0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0909090909090909
09090808080808080808080707070707070707070706060606060606060605050505050505050505
04040404040404040403030303030303030303020202020202020202010101010101010101010000
000000
>
1 %_Br
<
F6F5F4F4F3F2F1F0F0EFEEEDECECEBEAE9E8E8E7E6E5E4E4E3E2E1E1E0DFDEDDDDDCDBDAD9D9D8D7
D6D6D5D4D3D2D2D1D0CFCFCECDCCCBCBCAC9C8C8C7C6C5C4C4C3C2C1C1C0BFBEBEBDBCBBBABAB9B8
B7B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A
9A999897979695949493929291908F8F8E8D8C8C8B8A8A89888787868585848382828180807F7E7E
7D7C7B7B7A7979787777767574747372727170706F6E6E6D6C6C6B6A6A6968686766666564646362
626160605F5E5E5D5C5C5B5A5A595858575756555554535352525150504F4E4E4D4D4C4B4B4A4A49
484847474646454444434342424140403F3F3E3E3D3D3C3C3B3B3A39393938383737363635353434
343333
>
<
EAEAE9E9E9E9E8E8E8E8E7E7E7E6E6E6E6E5E5E5E5E4E4E4E3E3E3E3E2E2E2E2E1E1E1E0E0E0E0DF
DFDFDFDEDEDEDDDDDDDDDCDCDCDCDBDBDBDBDADADAD9D9D9D9D8D8D8D8D7D7D7D7D6D6D6D6D5D5D5
D4D4D4D4D3D3D3D3D2D2D2D2D1D1D1D1D0D0D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCBCBCBCBCA
CACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1
C0C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBDBCBCBCBCBBBBBBBBBABABABABAB9B9B9B9B8B8B8B8B7B7
B7B7B7B6B6B6B6B5B5B5B5B5B4B4B4B4B3B3B3B3B3B2B2B2B2B1B1B1B1B1B0B0B0B0B0AFAFAFAFAF
AEAEAEAEAEADADADADADACACACACACABABABABABAAAAAAAAAAAAA9A9A9A9A9A9A8A8A8A8A8A8A7A7
A7A7A7
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
2728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243434445464748494A4B4C4D
4E4F50515253545556565758595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F70707172
737475767778797A7A7B7C7D7E7F80818283848485868788898A8B8C8C8D8E8F9091929394949596
9798999A9A9B9C9D9E9FA0A1A1A2A3A4A5A6A7A7A8A9AAABACACADAEAFB0B1B2B2B3B4B5B6B6B7B8
B9BABBBBBCBDBEBFBFC0C1C2C3C3C4C5C6C7C7C8C9CACBCBCCCDCECECFD0D1D2D2D3D4D5D5D6D7D8
D8D9DADADBDCDDDDDEDFDFE0E1E2E2E3E4E4E5E6E6E7E8E8E9EAEAEBECECEDEDEEEFEFF0F0F1F1F2
F2F3F3
>
<
00000000000000000101010101010101010101010101020202020202020202020202020202030303
03030303030303030303030404040404040404040404040404040505050505050505050505050505
05060606060606060606060606060606070707070707070707070707070707070808080808080808
08080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B
0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F
0F0F0F0F0F0F0F0F1010101010101010101010101010101010101010101111111111111111111111
111111
>
1 %_Br
[
0.8196 0.01 1 0.31 1 50 100 %_Bs
0.9333 0.2078 1 0.5 1 50 57.3034 %_Bs
0.0314 0.0196 0.9137 0 1 50 55.618 %_Bs
0.2 0.6549 0.9529 0.0667 1 50 49.4382 %_Bs
0.9647 0.9176 0 0 1 45 32.5843 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient)
(Unnamed gradient) 0 6 Bd
[
<
F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2
D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAA
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878685848382
81807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938373635343332
31302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A
0908070605040302
>
0.9882
<
05050505050505050505050505050505050505050505050505050505050505050505050505050505
05050606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606070707070707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707070707070707070707070707070707
07070707070708080808080808080808080808080808080808080808080808080808080808080808
0808080808080808
>
<
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010100000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000
>
1 %_Br
<
E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEB
EBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1
F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4
F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9
>
<
1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B
3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263
6465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B
8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3
B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADB
DCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC
>
<
09090909090909090909090909090909090909090909090909090909090908080808080808080808
08080808080808080808080808080808080808080808080808080808080808080808080808080808
08080808080808080707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
060606050505050505050505050505050505050505050505050505050505050505
>
0.0039
1 %_Br
<
ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8
>
<
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414
>
<
EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8
C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09
>
<
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101
>
1 %_Br
<
08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F
303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555657
58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC
>
<
05050505050505050506060606060606060606060606060606070707070707070707070707070707
070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A
0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101010101010111111111111111111111111
1111111112121212121212121212121212121212131313131313131313
>
<
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECEC
ECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020203030303030303030303
0303030303030303030303030303030303030303030303030303030303
>
1 %_Br
<
03030303030303030303030303030303030303030303030304040404040404040404040404040404
04040404040404040404040404040404040404040404040404040404040404040505050505050505
05050505050505050505050505050505050505050505050505050505050505050505050505050505
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707080808080808080808080808080808080808080808080808
08
>
<
F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCE
CDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6
A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E
7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
5554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E
2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706
05
>
0.9137
0
1 %_Br
[
0.0078 0.9882 0.0314 0 1 50 100 %_Bs
0.9765 0.9882 0.0196 0.0039 1 50 80 %_Bs
0.9098 0.0784 0.0353 0.0039 1 50 60 %_Bs
0.9255 0.0745 0.9373 0.0118 1 50 40 %_Bs
0.0314 0.0196 0.9137 0 1 50 20 %_Bs
0.0118 0.9608 0.9137 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 13)
(Unnamed gradient 13) 1 2 Bd
[
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000001010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010102020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303030303030303030303030303030303030303
>
<
000102030405060708090A0B0C0D0E0F10111213141516161718191A1B1C1D1E1F20212223242525
262728292A2B2C2D2E2F2F30313233343536363738393A3B3C3D3D3E3F4041424343444546474848
494A4B4C4D4D4E4F505151525354555656575859595A5B5C5D5D5E5F606161626364646566676768
696A6A6B6C6D6D6E6F6F70717272737475757677777879797A7B7C7C7D7E7E7F8080818282838484
858686878888898A8A8B8C8C8D8E8E8F8F909191929393949495969697979899999A9A9B9C9C9D9D
9E9F9FA0A0A1A1A2A3A3A4A4A5A5A6A6A7A8A8A9A9AAAAABABACACADADAEAEAFB0B0B1B1B2B2B3B3
B4B4B5B5B6B6B7B7B8B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFBFC0C0C1C1C2C2C3C3C3C4C4C5C5C6
C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D1D2D2D2D3D3D3D4D4D5D5
D5D6D6D6D7D7D7D8D8D8D9D9D9DADADADADBDBDBDCDCDCDDDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1
E1E2E2E2E2E3E3E3E3E4E4E4E4E5E5E5E5E6E6E6E6E7E7E7E7E7E8E8E8E8E8E9E9E9E9EAEAEAEAEA
EAEBEBEBEBEBECECECECECECEDEDEDEDEDEDEEEEEEEEEEEEEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F1
F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4
F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5
>
<
00010203040506070808090A0B0C0D0E0F10111213141415161718191A1B1C1D1D1E1F2021222324
2425262728292A2B2B2C2D2E2F3030313233343535363738393A3A3B3C3D3E3F3F40414243434445
46464748494A4A4B4C4D4E4E4F505151525354545556575758595A5A5B5C5D5D5E5F5F6061626263
6464656667676869696A6B6B6C6D6D6E6F6F7071727273747475767677777879797A7B7B7C7D7D7E
7F7F808081828283848485858687878888898A8A8B8B8C8D8D8E8E8F8F9091919292939394959596
969797989899999A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAA
ABABACACADADAEAEAFAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B6B7B7B8B8B9B9B9BABABBBBBBBC
BCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C2C3C3C4C4C4C5C5C5C6C6C6C7C7C7C8C8C8C9C9C9CACACA
CBCBCBCCCCCCCDCDCDCECECECFCFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D3D4D4D4D5D5D5D5D6D6D6
D6D7D7D7D7D8D8D8D8D9D9D9D9D9DADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDEDFDF
DFDFDFE0E0E0E0E0E0E1E1E1E1E1E1E2E2E2E2E2E2E2E3E3E3E3E3E3E3E4E4E4E4E4E4E4E4E5E5E5
E5E5E5E5E5E5E6E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8
E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
>
0
1 %_Br
[
0 0 0 0 1 28 0 %_Bs
0.0118 0.9608 0.9137 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 1 6 Bd
[
<
03030303030303030303030303030303030303030303030304040404040404040404040404040404
04040404040404040404040404040404040404040404040404040404040404040505050505050505
05050505050505050505050505050505050505050505050505050505050505050505050505050505
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707080808080808080808080808080808080808080808080808
08
>
<
F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCE
CDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6
A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E
7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
5554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E
2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706
05
>
0.9137
0
1 %_Br
<
08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F
303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555657
58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC
>
<
05050505050505050506060606060606060606060606060606070707070707070707070707070707
070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A
0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101010101010111111111111111111111111
1111111112121212121212121212121212121212131313131313131313
>
<
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECEC
ECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020203030303030303030303
0303030303030303030303030303030303030303030303030303030303
>
1 %_Br
<
ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8
>
<
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414
>
<
EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8
C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09
>
<
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303030303030303030303030303030303020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101
>
1 %_Br
<
E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEB
EBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1
F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4
F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9
>
<
1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B
3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263
6465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B
8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3
B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADB
DCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC
>
<
09090909090909090909090909090909090909090909090909090909090908080808080808080808
08080808080808080808080808080808080808080808080808080808080808080808080808080808
08080808080808080707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
060606050505050505050505050505050505050505050505050505050505050505
>
0.0039
1 %_Br
<
F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2
D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAA
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878685848382
81807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938373635343332
31302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A
0908070605040302
>
0.9882
<
05050505050505050505050505050505050505050505050505050505050505050505050505050505
05050606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606070707070707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707070707070707070707070707070707
07070707070708080808080808080808080808080808080808080808080808080808080808080808
0808080808080808
>
<
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010100000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000
>
1 %_Br
[
0.0118 0.9608 0.9137 0 1 50 0 %_Bs
0.0314 0.0196 0.9137 0 1 50 20 %_Bs
0.9255 0.0745 0.9373 0.0118 1 50 40 %_Bs
0.9098 0.0784 0.0353 0.0039 1 50 60 %_Bs
0.9765 0.9882 0.0196 0.0039 1 50 80 %_Bs
0.0078 0.9882 0.0314 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 24)
(Unnamed gradient 24) 0 3 Bd
[
<
161717171818181919191A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F1F20202021212122222223232324
242425252526262627272828282929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F2F3030303131
313232323333333434343535353636363737373838383939393A3A3A3A3B3B3B3C3C3C3D3D3D3E3E
3E3F3F3F404040404141414242424343434344444445454546464646474747484848494949494A4A
4A4B4B4B4B4C4C4C4D4D4D4D4E4E4E4E4F4F4F505050505151515152525252535353535454545454
555555
>
<
3E3F40404142434445464748494A4B4C4D4E4F50515253535455565758595A5B5C5D5E5F60616263
636465666768696A6B6C6D6E6F70707172737475767778797A7B7B7C7D7E7F808182838485858687
88898A8B8C8D8E8E8F90919293949596969798999A9B9C9D9E9E9FA0A1A2A3A4A5A5A6A7A8A9AAAB
ABACADAEAFB0B1B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C4C5C6C7C8C9C9CACBCC
CCCDCECFD0D0D1D2D3D4D4D5D6D7D7D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E5E5E6E7E7E8E8
E9EAEA
>
<
404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667
68696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F80818283848586868788898A8B8C8D
8E8F90919293949596969798999A9B9C9D9E9FA0A1A2A2A3A4A5A6A7A8A9AAABACACADAEAFB0B1B2
B3B4B5B5B6B7B8B9BABBBCBDBDBEBFC0C1C2C3C3C4C5C6C7C8C9CACACBCCCDCECFCFD0D1D2D3D4D4
D5D6D7D8D9D9DADBDCDDDDDEDFE0E1E1E2E3E4E4E5E6E7E7E8E9EAEAEBECECEDEEEFEFF0F1F1F2F2
F3F4F4
>
<
111213141515161718191A1B1C1C1D1E1F2021222223242526272828292A2B2C2D2E2E2F30313233
33343536373839393A3B3C3D3E3E3F4041424343444546474848494A4B4C4D4D4E4F505151525354
5556565758595A5A5B5C5D5E5E5F6061626363646566676768696A6A6B6C6D6E6E6F707172727374
757576777879797A7B7C7C7D7E7F7F808182828384858586878888898A8B8B8C8D8E8E8F90919192
939394959696979898999A9A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A7A8A9A9AAAAABABAC
ADADAD
>
1 %_Br
<
555554545453535352525251515050504F4F4F4E4E4E4D4D4D4C4C4C4B4B4B4A4A4A494948484847
474746464645454544444443434342424241414040403F3F3F3E3E3E3D3D3D3C3C3C3B3B3B3A3A3A
393938383837373736363635353534343433333332323231313030302F2F2F2E2E2E2D2D2D2C2C2C
2B2B2B2A2A29292928282827272726262625252524242423232322222121212020201F1F1F1E1E1E
1D1D1D1C1C1C1B1B1B1A1A19191918181817171716
>
<
EAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C8C7C6C5
C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E
9D9C9B9A9A999897969594939291908F8E8D8C8B8A89888786858484838281807F7E7D7C7B7A7978
77767574737271706F6E6D6D6C6B6A696867666564636261605F5E5D5C5B5A595857565655545352
51504F4E4D4C4B4A494847464544434241403F3F3E
>
<
F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECD
CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5
A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D
7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655
54535251504F4E4D4C4B4A49484746454443424140
>
<
4141404040403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3B3A3A3A3A3939393838383837373737
36363636353535343434343333333332323232313131313030302F2F2F2F2E2E2E2E2D2D2D2D2C2C
2C2B2B2B2B2A2A2A2A29292929282828272727272626262625252525242424232323232222222221
2121212020201F1F1F1F1E1E1E1E1D1D1D1D1C1C1C1B1B1B1B1A1A1A1A1919191918181817171717
161616161515151514141414131313121212121111
>
1 %_Br
[
0.3333 0.9176 0.9569 0.68 1 50 100 %_Bs
0.0877 0.2415 0.2518 0.0671 1 46.0177 37.0786 %_Bs
0.3333 0.9176 0.9569 0.2549 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 37)
(Unnamed gradient 37) 1 2 Bd
[
<
C4C3C3C2C1C1C0C0BFBEBEBDBCBCBBBABAB9B9B8B7B7B6B5B5B4B3B3B2B2B1B0B0AFAEAEADADACAB
ABAAA9A9A8A8A7A6A6A5A4A4A3A2A2A1A1A09F9F9E9E9D9C9C9B9A9A999998979796959594949392
929191908F8F8E8D8D8C8C8B8A8A898988878786868584848382828181807F7F7E7E7D7C7C7B7B7A
79797878777676757574737372727170706F6F6E6D6D6C6C6B6B6A69696868676666656564646362
626161605F5F5E5E5D5D5C5B5B5A5A5959585757565655555453535252515150504F4E4E4D4D4C4C
4B4B4A494948484747464645444443434242414140403F3F3E3E3D3C3C3B3B3A3A39393838373736
363535343433333232313130302F2F2F2E2E2D2D2C2C2B2B2B2A2A
>
<
0001020203040506070708090A0B0C0C0D0E0F101011121314151516171819191A1B1C1D1E1E1F20
21222223242526262728292A2A2B2C2D2E2F2F3031323333343536373738393A3B3B3C3D3E3F3F40
41424343444546464748494A4A4B4C4D4E4E4F505152525354555556575859595A5B5C5C5D5E5F60
6061626363646566676768696A6A6B6C6D6D6E6F707171727374747576777778797A7A7B7C7D7D7E
7F80808182838384858686878889898A8B8C8C8D8E8F8F90919192939494959697979899999A9B9C
9C9D9E9E9FA0A1A1A2A3A3A4A5A5A6A7A8A8A9AAAAABACACADAEAEAFB0B0B1B2B2B3B4B4B5B6B6B7
B8B8B9BABABBBCBCBDBDBEBFBFC0C0C1C2C2C3C3C4C5C5C6C6C7C7
>
<
02030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20212223242526272829
2A2B2C2D2E2F30313232333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50
515253545455565758595A5B5C5D5E5F60616263646566676869696A6B6C6D6E6F70717273747576
7778797A7A7B7C7D7E7F80818283848586878888898A8B8C8D8E8F90919293939495969798999A9B
9C9D9E9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBE
BFC0C1C2C3C4C4C5C6C7C8C9CACACBCCCDCECFCFD0D1D2D3D4D4D5D6D7D8D8D9DADBDCDDDDDEDFE0
E0E1E2E3E4E4E5E6E7E7E8E9EAEAEBECEDEDEEEFEFF0F1F1F2F2F3
>
<
00000000000000000000000101010101010101010101010101010101010101010101020202020202
02020202020202020202020202020202030303030303030303030303030303030303030303030304
04040404040404040404040404040404040404040405050505050505050505050505050505050505
05050505050606060606060606060606060606060606060606060606070707070707070707070707
07070707070707070707070708080808080808080808080808080808080808080808080808090909
09090909090909090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A
0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B
>
1 %_Br
[
0.7686 0 0.0078 0 1 46.6292 0.5618 %_Bs
0.1647 0.7804 0.9529 0.0431 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 4)
(Unnamed gradient 4) 0 5 Bd
[
<
EEEDEDECECEBEBEAEAE9E8E8E7E7E6E6E5E5E4E3E3E2E2E1E1E0DFDFDEDEDDDDDCDCDBDADAD9D9D8
D8D7D7D6D5D5D4D4D3D3D2D2D1
>
<
3534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1A191817161514131211100F0E0D
0C0B0A09080706050403020100
>
1
<
807F7E7D7C7B7A79787776757473727271706F6E6D6C6B6A69686766656464636261605F5E5D5C5B
5A59585757565554535251504F
>
1 %_Br
<
08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F
303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555657
58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE
>
<
050505060606060607070707080808080809090909090A0A0A0A0A0B0B0B0B0B0C0C0C0C0D0D0D0D
0D0E0E0E0E0E0F0F0F0F0F1010101010111111111212121212131313131314141414141515151515
161616161717171717181818181819191919191A1A1A1A1A1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E
1E1E1E1F1F1F1F1F2020202021212121212222222222232323232324242424252525252526262626
2627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2D2E2E2E2E2F
2F2F2F2F303030303031313131313232323232333333333434343434353535
>
<
E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECEDEDED
EDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F1
F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4
F4F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8
F8F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFC
FCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFF
>
<
0001010202030304040506060707080809090A0B0B0C0C0D0D0E0E0F101011111212131314151516
161717181819191A1B1B1C1C1D1D1E1E1F2020212122222323242525262627272828292A2A2B2B2C
2C2D2D2E2F2F3030313132323334343535363637373839393A3A3B3B3C3C3D3E3E3F3F4040414142
434344444545464647484849494A4A4B4B4C4D4D4E4E4F4F50505151525353545455555656575858
59595A5A5B5B5C5D5D5E5E5F5F6060616262636364646565666767686869696A6A6B6C6C6D6D6E6E
6F6F7071717272737374747576767777787879797A7B7B7C7C7D7D7E7E7F7F
>
1 %_Br
<
33333232323231313131303030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A29292929
282828282727272726262625252525242424242323232322222221212121202020201F1F1F1F1E1E
1E1E1D1D1D1C1C1C1C1B1B1B1B1A1A1A1A1919191818181817171717161616161515151414141413
13131312121212111111101010100F0F0F0F0E0E0E0E0D0D0D0D0C0C0C0B0B0B0B0A0A0A0A090909
090808
>
<
A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180
7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958
57565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39383736353433323130
2F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908
070605
>
<
F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1
F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEE
EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECEC
ECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9
E9E9E9
>
<
1111111111101010101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D
0D0D0D0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0909090909090909
09090808080808080808080707070707070707070706060606060606060605050505050505050505
04040404040404040403030303030303030303020202020202020202010101010101010101010000
000000
>
1 %_Br
<
F6F5F4F4F3F2F1F0F0EFEEEDECECEBEAE9E8E8E7E6E5E4E4E3E2E1E1E0DFDEDDDDDCDBDAD9D9D8D7
D6D6D5D4D3D2D2D1D0CFCFCECDCCCBCBCAC9C8C8C7C6C5C4C4C3C2C1C1C0BFBEBEBDBCBBBABAB9B8
B7B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A
9A999897979695949493929291908F8F8E8D8C8C8B8A8A89888787868585848382828180807F7E7E
7D7C7B7B7A7979787777767574747372727170706F6E6E6D6C6C6B6A6A6968686766666564646362
626160605F5E5E5D5C5C5B5A5A595858575756555554535352525150504F4E4E4D4D4C4B4B4A4A49
484847474646454444434342424140403F3F3E3E3D3D3C3C3B3B3A39393938383737363635353434
343333
>
<
EAEAE9E9E9E9E8E8E8E8E7E7E7E6E6E6E6E5E5E5E5E4E4E4E3E3E3E3E2E2E2E2E1E1E1E0E0E0E0DF
DFDFDFDEDEDEDDDDDDDDDCDCDCDCDBDBDBDBDADADAD9D9D9D9D8D8D8D8D7D7D7D7D6D6D6D6D5D5D5
D4D4D4D4D3D3D3D3D2D2D2D2D1D1D1D1D0D0D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCBCBCBCBCA
CACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1
C0C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBDBCBCBCBCBBBBBBBBBABABABABAB9B9B9B9B8B8B8B8B7B7
B7B7B7B6B6B6B6B5B5B5B5B5B4B4B4B4B3B3B3B3B3B2B2B2B2B1B1B1B1B1B0B0B0B0B0AFAFAFAFAF
AEAEAEAEAEADADADADADACACACACACABABABABABAAAAAAAAAAAAA9A9A9A9A9A9A8A8A8A8A8A8A7A7
A7A7A7
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
2728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243434445464748494A4B4C4D
4E4F50515253545556565758595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F70707172
737475767778797A7A7B7C7D7E7F80818283848485868788898A8B8C8C8D8E8F9091929394949596
9798999A9A9B9C9D9E9FA0A1A1A2A3A4A5A6A7A7A8A9AAABACACADAEAFB0B1B2B2B3B4B5B6B6B7B8
B9BABBBBBCBDBEBFBFC0C1C2C3C3C4C5C6C7C7C8C9CACBCBCCCDCECECFD0D1D2D2D3D4D5D5D6D7D8
D8D9DADADBDCDDDDDEDFDFE0E1E2E2E3E4E4E5E6E6E7E8E8E9EAEAEBECECEDEDEEEFEFF0F0F1F1F2
F2F3F3
>
<
00000000000000000101010101010101010101010101020202020202020202020202020202030303
03030303030303030303030404040404040404040404040404040505050505050505050505050505
05060606060606060606060606060606070707070707070707070707070707070808080808080808
08080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B
0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D
0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F
0F0F0F0F0F0F0F0F1010101010101010101010101010101010101010101111111111111111111111
111111
>
1 %_Br
[
0.8196 0 1 0.31 1 50 100 %_Bs
0.9333 0.2078 1 0.5 1 50 57.3034 %_Bs
0.0314 0.0196 0.9137 0 1 50 55.618 %_Bs
0.2 0.6549 0.9529 0.0667 1 50 49.4382 %_Bs
0.9647 0.9176 0 0 1 45 32.5843 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 8)
(Unnamed gradient 8) 0 5 Bd
[
<
F6F5F4F4F3F2F1F0F0EFEEEDECECEBEAE9E8E8E7E6E5E4E4E3E2E1E0E0DFDEDDDCDCDBDAD9D8D8D7
D6D5D4D3D3D2D1D0CFCFCECDCCCBCBCAC9C8C7C7C6C5C4C3C3C2C1C0BFBFBEBDBCBBBBBAB9B8B7B7
B6B5B4B3B3B2B1B0AFAFAEADACABABAAA9A8A7A7A6A5A4A3A3A2A1A09F9F9E9D9C9B9B9A99989797
96959493929291908F8E8E8D8C8B8A8A8988878686858483828281807F7E7E7D7C7B7A7A79787776
76757473727271706F6E6E6D6C6B6A6A6968676666656463626261605F5E5E5D5C5B5A5A59585756
56555453525151504F4E4D4D4C4B4A494948474645454443424141403F3E3D3D3C3B3A3939383736
35353433
>
<
EAEAE9E9E9E9E8E8E8E8E7E7E7E6E6E6E6E5E5E5E4E4E4E4E3E3E3E3E2E2E2E1E1E1E1E0E0E0E0DF
DFDFDEDEDEDEDDDDDDDCDCDCDCDBDBDBDBDADADAD9D9D9D9D8D8D8D8D7D7D7D6D6D6D6D5D5D5D4D4
D4D4D3D3D3D3D2D2D2D1D1D1D1D0D0D0D0CFCFCFCECECECECDCDCDCCCCCCCCCBCBCBCBCACACAC9C9
C9C9C8C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C4C3C3C3C3C2C2C2C1C1C1C1C0C0C0C0BFBFBFBEBE
BEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B9B8B8B8B8B7B7B7B6B6B6B6B5B5B5B5B4B4B4B3B3
B3B3B2B2B2B1B1B1B1B0B0B0B0AFAFAFAEAEAEAEADADADADACACACABABABABAAAAAAA9A9A9A9A8A8
A8A8A7A7
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3
>
<
00000000000000000101010101010101010101010101020202020202020202020202020203030303
03030303030303030303030404040404040404040404040404050505050505050505050505050506
06060606060606060606060606070707070707070707070707070707080808080808080808080808
080809090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B
0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E
0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101011111111
11111111
>
1 %_Br
<
08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F
303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555657
58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6
>
<
05060708090A0B0C0D0E0F10111212131415161718191A1B1C1D1E1F202122232425262728292A2B
2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243444445464748494A4B4C4D4E4F5051
52535455565758595A5B5C5D5E5E5F606162636465666768696A6B6C6D6E6F707172737475767777
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F90919192939495969798999A9B9C9D9E
9FA0A1A2A3A4A5A6A7A8A9AAAAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C4
C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDDDEDFE0E1E2E3E4E5E6E7E8E9EA
>
<
E9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D1D0CFCECDCCCBCAC9C8C7C6C5C4C3
C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A3A2A1A09F9E9D9C
9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574
74737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D
4C4B4A49484746464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726
2524232221201F1E1D1C1B1A19181717161514131211100F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAA
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878685848382
81807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938373635343332
31302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A
0908
>
<
00000000000000000000000000000000000000000001010101010101010101010101010101010101
01010101010101010101010101010101010101010102020202020202020202020202020202020202
02020202020202020202020202020202020202020203030303030303030303030303030303030303
03030303030303030303030303030303030303030304040404040404040404040404040404040404
04040404040404040404040404040404040404040405050505050505050505050505050505050505
0505
>
<
FFFFFFFFFFFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFB
FBFBFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F6F6
F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F2F2F2F2F2
F2F2F2F2F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEEEEEE
EDEDEDEDEDEDEDEDEDECECECECECECECECECECEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAE9E9E9
E9E9
>
<
4F4F4E4E4D4D4D4C4C4C4B4B4A4A4A49494848484747464646454544444443434242424141404040
3F3F3F3E3E3D3D3D3C3C3B3B3B3A3A39393938383737373636353535343434333332323231313030
302F2F2E2E2E2D2D2C2C2C2B2B2A2A2A292929282827272726262525252424232323222221212120
201F1F1F1E1E1D1D1D1C1C1C1B1B1A1A1A1919181818171716161615151414141313121212111111
10100F0F0F0E0E0D0D0D0C0C0B0B0B0A0A0909090808070707060606050504040403030202020101
0000
>
1 %_Br
<
EEEDEDECECEBEBEAEAE9E9E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDBDADA
D9D9D8D8D8D7D7D6D6D5D5D5D4D4D3D3D3D2D2D2D1D1
>
<
3534333231302F2E2D2C2B2A29282726252423222120201F1E1D1C1B1A1918171615151413121110
0F0F0E0D0C0B0A0A0908070706050404030202010000
>
1
<
807F7E7D7C7B7A79787776767574737271706F6E6E6D6C6B6A6968686766656464636261605F5F5E
5D5C5C5B5A5959585756565554545352525151504F4F
>
1 %_Br
[
0.2 0.6549 0.9529 0.0667 1 50 100 %_Bs
0.9647 0.9176 0 0 1 50 57.3034 %_Bs
0.0314 0.0196 0.9137 0 1 50 55.618 %_Bs
0.8196 0 1 0.31 1 50 49.4382 %_Bs
0.9333 0.2078 1 0.5 1 45 32.5843 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (White, Black)
(White, Black) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 1 1 50 100 %_Bs
0 0 0 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Azure Rings)
(Azure Rings) 22.5 22.5 58.5 58.5 [
%AI3_Tile
(0 O 0 R 0.9569 0.9294 0 0 k
 0.9569 0.9294 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1.75 w 4 M []0 d0 XR
40.5 58.5 m
40.5 48.5586 32.4409 40.5 22.5 40.5 c
12.5591 40.5 4.5 48.5586 4.5 58.5 c
4.5 68.4414 12.5591 76.5 22.5 76.5 c
32.4409 76.5 40.5 68.4414 40.5 58.5 c
s40.5 22.5 m
40.5 12.5586 32.4409 4.5 22.5 4.5 c
12.5591 4.5 4.5 12.5586 4.5 22.5 c
4.5 32.4414 12.5591 40.5 22.5 40.5 c
32.4409 40.5 40.5 32.4414 40.5 22.5 c
s40.5 40.5 m
40.5 30.5586 32.4409 22.5 22.5 22.5 c
12.5591 22.5 4.5 30.5586 4.5 40.5 c
4.5 50.4414 12.5591 58.5 22.5 58.5 c
32.4409 58.5 40.5 50.4414 40.5 40.5 c
s58.5 58.5 m
58.5 48.5586 50.4409 40.5 40.5 40.5 c
30.5591 40.5 22.5 48.5586 22.5 58.5 c
22.5 68.4414 30.5591 76.5 40.5 76.5 c
50.4409 76.5 58.5 68.4414 58.5 58.5 c
s58.5 22.5 m
58.5 12.5586 50.4409 4.5 40.5 4.5 c
30.5591 4.5 22.5 12.5586 22.5 22.5 c
22.5 32.4414 30.5591 40.5 40.5 40.5 c
50.4409 40.5 58.5 32.4414 58.5 22.5 c
s58.5 40.5 m
58.5 30.5586 50.4409 22.5 40.5 22.5 c
30.5591 22.5 22.5 30.5586 22.5 40.5 c
22.5 50.4414 30.5591 58.5 40.5 58.5 c
50.4409 58.5 58.5 50.4414 58.5 40.5 c
s76.5 58.5 m
76.5 48.5586 68.4409 40.5 58.5 40.5 c
48.5591 40.5 40.5 48.5586 40.5 58.5 c
40.5 68.4414 48.5591 76.5 58.5 76.5 c
68.4409 76.5 76.5 68.4414 76.5 58.5 c
s76.5 22.5 m
76.5 12.5586 68.4409 4.5 58.5 4.5 c
48.5591 4.5 40.5 12.5586 40.5 22.5 c
40.5 32.4414 48.5591 40.5 58.5 40.5 c
68.4409 40.5 76.5 32.4414 76.5 22.5 c
s76.5 40.5 m
76.5 30.5586 68.4409 22.5 58.5 22.5 c
48.5591 22.5 40.5 30.5586 40.5 40.5 c
40.5 50.4414 48.5591 58.5 58.5 58.5 c
68.4409 58.5 76.5 50.4414 76.5 40.5 c
s%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Camouflage)
(Camouflage) 1 1 73 73 [
%AI3_Tile
(0 O 0 R 0.5961 0.1412 0.949 0.0275 k
 0.5961 0.1412 0.949 0.0275 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
1 73 m
1 1 L
73 1 L
73 73 L
1 73 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.498 0.349 0.9725 0.2 k
 0.498 0.349 0.9725 0.2 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
18.5449 73 m
18.5449 1 L
46.7832 1 L
46.7832 73 L
18.5449 73 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.1882 0.1098 0.9255 0.0157 k
 0.1882 0.1098 0.9255 0.0157 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
11.9512 1 m
11.9512 4.7129 9.2314 2.8813 9.2314 6.5938 c
9.2314 10.2334 4.25 10.2334 4.25 13.8735 c
4.25 17.4858 10.0313 17.4858 10.0313 21.0991 c
10.0313 24.832 10.208 24.832 10.208 28.5654 c
10.208 32.3071 5.5205 32.3071 5.5205 36.0469 c
5.5205 39.7021 11.8838 39.7021 11.8838 43.356 c
11.8838 47.0566 7.4609 47.0566 7.4609 50.7568 c
7.4609 54.4043 5.7959 54.4043 5.7959 58.0542 c
5.7959 61.7686 4.6631 61.7686 4.6631 65.4805 c
4.6631 69.1636 11.9512 69.3184 11.9512 73 C
27.9268 73 L
27.9268 69.3184 22.0635 69.1636 22.0635 65.4805 c
22.0635 61.7686 28.6631 61.7686 28.6631 58.0542 c
28.6631 54.4043 25.1553 54.4043 25.1553 50.7568 c
25.1553 47.0566 28.8145 47.0566 28.8145 43.356 c
28.8145 39.7021 22.1191 39.7021 22.1191 36.0469 c
22.1191 32.3071 26.3945 32.3071 26.3945 28.5654 c
26.3945 24.832 24.4248 24.832 24.4248 21.0991 c
24.4248 17.4858 20.3838 17.4858 20.3838 13.8735 c
20.3838 10.2334 24.6055 10.2334 24.6055 6.5938 c
24.6055 2.8813 27.9268 4.7129 27.9268 1 C
11.9512 1 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.9255 0.2157 0.9647 0.0745 k
 0.9255 0.2157 0.9647 0.0745 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
41.875 1 m
41.875 4.7134 42.3867 2.8818 42.3867 6.5938 c
42.3867 10.2334 40.5947 10.2334 40.5947 13.8735 c
40.5947 17.4858 41.5742 17.4858 41.5742 21.0991 c
41.5742 24.832 43.6484 24.832 43.6484 28.5659 c
43.6484 32.3076 39.1709 32.3076 39.1709 36.0469 c
39.1709 39.7026 39.7549 39.7026 39.7549 43.356 c
39.7549 47.0566 45.3896 47.0566 45.3896 50.7568 c
45.3896 54.4043 40.1055 54.4043 40.1055 58.0542 c
40.1055 61.7686 40.6289 61.7686 40.6289 65.4805 c
40.6289 69.1636 41.875 69.3184 41.875 73 C
59.0752 73 L
59.0752 69.4219 53.4805 70.1934 53.4805 66.6143 c
53.4805 62.9136 55.8945 62.9136 55.8945 59.2153 c
55.8945 55.502 61.0059 55.502 61.0059 51.7886 c
61.0059 48.1489 60.5635 48.1489 60.5635 44.5103 c
60.5635 40.897 59.9277 40.897 59.9277 37.2842 c
59.9277 33.5508 56.3662 33.5508 56.3662 29.8169 c
56.3662 26.0762 61.0908 26.0762 61.0908 22.3354 c
61.0908 18.6812 52.6025 18.6812 52.6025 15.0264 c
52.6025 11.3262 55.7461 11.3262 55.7461 7.6265 c
55.7461 3.978 59.0752 4.6484 59.0752 1 C
41.875 1 L
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Clown Attack)
(Clown Attack) 5.25 11 41.25 47 [
%AI3_Tile
(0 O 0 R 0.9255 0 1 0 k
 0.9255 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
17.5 18.25 m
17.5 15.2119 15.0376 12.75 12 12.75 c
8.9624 12.75 6.5 15.2119 6.5 18.25 c
6.5 21.2881 8.9624 23.75 12 23.75 c
15.0376 23.75 17.5 21.2881 17.5 18.25 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0078 0.9529 0 0 k
 0.0078 0.9529 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.25 34.125 m
22.25 31.2939 19.9556 29 17.125 29 c
14.2944 29 12 31.2939 12 34.125 c
12 36.9561 14.2944 39.25 17.125 39.25 c
19.9556 39.25 22.25 36.9561 22.25 34.125 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0118 0.9608 0.9137 0 k
 0.0118 0.9608 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
30 31.625 m
30 29.4854 28.2646 27.75 26.125 27.75 c
23.9849 27.75 22.25 29.4854 22.25 31.625 c
22.25 33.7646 23.9849 35.5 26.125 35.5 c
28.2646 35.5 30 33.7646 30 31.625 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0314 0.0196 0.9137 0 k
 0.0314 0.0196 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
23.25 24.5 m
23.25 22.4287 21.5713 20.75 19.5 20.75 c
17.4287 20.75 15.75 22.4287 15.75 24.5 c
15.75 26.5713 17.4287 28.25 19.5 28.25 c
21.5713 28.25 23.25 26.5713 23.25 24.5 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.9569 0.9294 0 0 k
 0.9569 0.9294 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
36 22.25 m
36 19.0742 33.4258 16.5 30.25 16.5 c
27.0742 16.5 24.5 19.0742 24.5 22.25 c
24.5 25.4258 27.0742 28 30.25 28 c
33.4258 28 36 25.4258 36 22.25 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.1882 0.1216 0.8 0.0157 k
 0.1882 0.1216 0.8 0.0157 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
24.25 16.5 m
24.25 14.8438 22.9067 13.5 21.25 13.5 c
19.5933 13.5 18.25 14.8438 18.25 16.5 c
18.25 18.1563 19.5933 19.5 21.25 19.5 c
22.9067 19.5 24.25 18.1563 24.25 16.5 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.8353 0 0 0 k
 0.8353 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
37.25 43.875 m
37.25 39.5264 33.7236 36 29.375 36 c
25.0264 36 21.5 39.5264 21.5 43.875 c
21.5 48.2236 25.0264 51.75 29.375 51.75 c
33.7236 51.75 37.25 48.2236 37.25 43.875 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0078 0.1961 0.9373 0 k
 0.0078 0.1961 0.9373 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
38.75 26.625 m
38.75 25.7275 38.0225 25 37.125 25 c
36.2275 25 35.5 25.7275 35.5 26.625 c
35.5 27.5225 36.2275 28.25 37.125 28.25 c
38.0225 28.25 38.75 27.5225 38.75 26.625 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0196 0.5961 0.9137 0 k
 0.0196 0.5961 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
19.875 42 m
19.875 41.1025 19.1475 40.375 18.25 40.375 c
17.3525 40.375 16.625 41.1025 16.625 42 c
16.625 42.8975 17.3525 43.625 18.25 43.625 c
19.1475 43.625 19.875 42.8975 19.875 42 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0118 0.9608 0.9137 0 k
 0.0118 0.9608 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
12.75 28.125 m
12.75 26.8135 11.6865 25.75 10.375 25.75 c
9.0635 25.75 8 26.8135 8 28.125 c
8 29.4365 9.0635 30.5 10.375 30.5 c
11.6865 30.5 12.75 29.4365 12.75 28.125 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.9255 0 1 0 k
 0.9255 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
43.25 33 m
43.25 30.998 41.627 29.375 39.625 29.375 c
37.623 29.375 36 30.998 36 33 c
36 35.002 37.623 36.625 39.625 36.625 c
41.627 36.625 43.25 35.002 43.25 33 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0314 0.0196 0.9137 0 k
 0.0314 0.0196 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
13.25 43.75 m
13.25 40.9883 11.0117 38.75 8.25 38.75 c
5.4883 38.75 3.25 40.9883 3.25 43.75 c
3.25 46.5117 5.4883 48.75 8.25 48.75 c
11.0117 48.75 13.25 46.5117 13.25 43.75 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.3922 0.9451 0 0 k
 0.3922 0.9451 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.5 22.25 m
6.5 20.7314 5.2686 19.5 3.75 19.5 c
2.2314 19.5 1 20.7314 1 22.25 c
1 23.7686 2.2314 25 3.75 25 c
5.2686 25 6.5 23.7686 6.5 22.25 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0235 0.0118 0.6 0 k
 0.0235 0.0118 0.6 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.4883 32.75 m
34.4883 31.9277 33.8223 31.2617 33 31.2617 c
32.1777 31.2617 31.5117 31.9277 31.5117 32.75 c
31.5117 33.5723 32.1777 34.2383 33 34.2383 c
33.8223 34.2383 34.4883 33.5723 34.4883 32.75 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0314 0.0196 0.9137 0 k
 0.0314 0.0196 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
49.25 43.75 m
49.25 40.9883 47.0117 38.75 44.25 38.75 c
41.4883 38.75 39.25 40.9883 39.25 43.75 c
39.25 46.5117 41.4883 48.75 44.25 48.75 c
47.0117 48.75 49.25 46.5117 49.25 43.75 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.3922 0.9451 0 0 k
 0.3922 0.9451 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
42.5 22.25 m
42.5 20.7314 41.2686 19.5 39.75 19.5 c
38.2314 19.5 37 20.7314 37 22.25 c
37 23.7686 38.2314 25 39.75 25 c
41.2686 25 42.5 23.7686 42.5 22.25 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0314 0.0196 0.9137 0 k
 0.0314 0.0196 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
49.25 7.752 m
49.25 4.9902 47.0117 2.752 44.25 2.752 c
41.4883 2.752 39.25 4.9902 39.25 7.752 c
39.25 10.5137 41.4883 12.752 44.25 12.752 c
47.0117 12.752 49.25 10.5137 49.25 7.752 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.8353 0 0 0 k
 0.8353 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
37.25 7.875 m
37.25 3.5264 33.7236 0 29.375 0 c
25.0264 0 21.5 3.5264 21.5 7.875 c
21.5 12.2236 25.0264 15.75 29.375 15.75 c
33.7236 15.75 37.25 12.2236 37.25 7.875 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0314 0.0196 0.9137 0 k
 0.0314 0.0196 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
13.25 7.75 m
13.25 4.9883 11.0117 2.75 8.25 2.75 c
5.4883 2.75 3.25 4.9883 3.25 7.75 c
3.25 10.5117 5.4883 12.75 8.25 12.75 c
11.0117 12.75 13.25 10.5117 13.25 7.75 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.9255 0 1 0 k
 0.9255 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
7.25 33 m
7.25 30.998 5.627 29.375 3.625 29.375 c
1.623 29.375 0 30.998 0 33 c
0 35.002 1.623 36.625 3.625 36.625 c
5.627 36.625 7.25 35.002 7.25 33 c
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.0235 0.4078 0 0 k
 0.0235 0.4078 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
39.6533 16.0381 m
39.6533 15.1064 38.8975 14.3506 37.9658 14.3506 c
37.0342 14.3506 36.2783 15.1064 36.2783 16.0381 c
36.2783 16.9697 37.0342 17.7256 37.9658 17.7256 c
38.8975 17.7256 39.6533 16.9697 39.6533 16.0381 c
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Pyramids)
(Pyramids) 1 1 19.5 19.5 [
%AI3_Tile
(0 O 0 R 0.1882 0.1294 0.102 0.0118 k
 0.1882 0.1294 0.102 0.0118 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
1 19.5 m
10.25 10.25 l
19.5 19.5 l
1 19.5 l
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.6235 0.4863 0.4863 0.4784 k
 0.6235 0.4863 0.4863 0.4784 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
19.5 1 m
10.25 10.25 l
1 1 l
19.5 1 l
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.3529 0.2549 0.2235 0.0667 k
 0.3529 0.2549 0.2235 0.0667 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
1 1 m
10.25 10.25 l
1 19.5 l
1 1 l
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.4902 0.3647 0.3451 0.2196 k
 0.4902 0.3647 0.3451 0.2196 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
19.5 19.5 m
10.25 10.25 l
19.5 1 l
19.5 19.5 l
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Red Stripe)
(Red Stripe) 37 19 73 55 [
%AI3_Tile
(0 O 0 R 0 0.9608 0.9137 0 k
 0 0.9608 0.9137 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 18 w 4 M []0 d0 XR
37 37 m
73 37 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Red Tablecloth)
(Red Tablecloth) 0 0 24 24 [
%AI3_Tile
(0 O 0 R 0.25 1 1 0 k
 0.25 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6 18 m
0 18 L
0 24 L
6 24 L
6 18 L
f18 18 m
12 18 L
12 24 L
18 24 L
18 18 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.1225 0.5 0.5 0 k
 0.1225 0.5 0.5 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
12 18 m
6 18 L
6 24 L
12 24 L
12 18 L
f24 18 m
18 18 L
18 24 L
24 24 L
24 18 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0 k
 0 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
12 12 m
6 12 L
6 18 L
12 18 L
12 12 L
f24 12 m
18 12 L
18 18 L
24 18 L
24 12 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.1225 0.5 0.5 0 k
 0.1225 0.5 0.5 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6 12 m
0 12 L
0 18 L
6 18 L
6 12 L
f18 12 m
12 12 L
12 18 L
18 18 L
18 12 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.25 1 1 0 k
 0.25 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6 6 m
0 6 L
0 12 L
6 12 L
6 6 L
f18 6 m
12 6 L
12 12 L
18 12 L
18 6 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.1225 0.5 0.5 0 k
 0.1225 0.5 0.5 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
12 6 m
6 6 L
6 12 L
12 12 L
12 6 L
f24 6 m
18 6 L
18 12 L
24 12 L
24 6 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0 k
 0 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
12 0 m
6 0 L
6 6 L
12 6 L
12 0 L
f24 0 m
18 0 L
18 6 L
24 6 L
24 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.1225 0.5 0.5 0 k
 0.1225 0.5 0.5 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6 0 m
0 0 L
0 6 L
6 6 L
6 0 L
f18 0 m
12 0 L
12 6 L
18 6 L
18 0 L
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([Registration]) Pc
0 0 0 0 k
(White) Pc
0 0 0 1 k
(Black) Pc
0 0 0 0.8 k
(80% Black) Pc
0 0 0 0.6 k
(60% Black) Pc
0 0 0 0.4 k
(40% Black) Pc
0 0 0 0.2 k
(20% Black) Pc
0 1 1 0 k
(Red M=100 Y=100) Pc
0 0.75 0.75 0 k
(75% Red M=75 Y=75) Pc
0 0.5 0.5 0 k
(50% Red M=50 Y=50) Pc
0 0.25 0.25 0 k
(25% Red M=25 Y=25) Pc
0.8 0 1 0 k
(Green C=80 Y=100) Pc
0.6 0 0.75 0 k
(75% Green C=60 Y=75) Pc
0.4 0 0.5 0 k
(50% Green C=40 Y=50) Pc
0.2 0 0.25 0 k
(25% Green C=20 Y=25) Pc
1 0.5 0 0 k
(Blue C=100 M=50) Pc
0.75 0.375 0 0 k
(75% Blue C=75 M=37.5) Pc
0.5 0.25 0 0 k
(50% Blue C=50 M=25) Pc
0.25 0.125 0 0 k
(25% Blue C=25 M=12.5) Pc
0 0.5 1 0 k
(Orange M=50 Y=100) Pc
0 0.375 0.75 0 k
(75% Orange M=37.5 Y=75) Pc
0 0.25 0.5 0 k
(50% Orange M=25 Y=50) Pc
0 0.125 0.25 0 k
(25% Orange M=12.5 Y=25) Pc
0.5 0.9 0 0 k
(Violet C=50 M=90) Pc
0.375 0.675 0 0 k
(75% Violet C=37.5 M=67.5) Pc
0.25 0.45 0 0 k
(50% Violet C=25 M=45 ) Pc
0.125 0.225 0 0 k
(25% Violet C=12.5 M=22.5) Pc
0.8 0 0 0 k
(Azure C=80) Pc
0.6 0 0 0 k
(75% Azure C=60) Pc
0.4 0 0 0 k
(50% Azure C=40) Pc
0.2 0 0 0 k
(25% Azure C=20) Pc
0 0 1 0 k
(Yellow) Pc
0 0 0.75 0 k
(75% Yellow) Pc
0 0 0.5 0 k
(50% Yellow) Pc
0 0 0.25 0 k
(25% Yellow) Pc
Bb
2 (White, Black) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(White, Black) Pc
Bb
0 0 0 0 Bh
2 (Black, White Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black, White Radial) Pc
Bb
2 (Steel Bar II) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Steel Bar II) Pc
Bb
2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Rainbow) Pc
Bb
0 0 0 0 Bh
2 (Emerald Eye) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Emerald Eye) Pc
Bb
2 (Sunset) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Sunset) Pc
(Red Tablecloth) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Red Tablecloth) Pc
(Pyramids) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Pyramids) Pc
(Azure Rings) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Azure Rings) Pc
(Red Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Red Stripe) Pc
(Clown Attack) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Clown Attack) Pc
(Camouflage) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Camouflage) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 255 79 79 Lb
(Layer 2) Ln
0 A
uq1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
237.4785 173.6211 m
237.4785 78.1201 160.0566 0.7021 64.5566 0.7021 c
-30.9429 0.7021 -108.3613 78.1201 -108.3613 173.6211 c
-108.3613 269.1211 -30.9429 346.54 64.5566 346.54 c
160.0566 346.54 237.4785 269.1211 237.4785 173.6211 c
hWn0 Ap
0 O
0 g
%AI5_File:
%AI5_BeginRaster
(\\\\ds1\\files\\RAUL AVILA\\Flechas\\Scan for Logo\\stationery-insignia.tif) 0 XG
[ 0.2591 0 0 0.2591 -147.2935 314.3633 ] 1800 1040 0 Xh
[ 0.2591 0 0 0.2591 -147.2935 314.3633 ] 0 0 1800 1040 1800 1040 8 4 0 0 0 0
XF
XH
%AI5_EndRaster
F/BBAccumRotation (0.000000) XT
Q0 A
1 Ap
0 R
0.9294 0.1765 0.9961 0.051 K
0 J 0 j 2.0571 w 4 M []0 d0 XR
280.3906 172.7207 m
280.3906 53.4297 183.6865 -43.2725 64.3955 -43.2725 c
-54.8921 -43.2725 -151.5952 53.4297 -151.5952 172.7207 c
-151.5952 292.0103 -54.8921 388.7134 64.3955 388.7134 c
183.6865 388.7134 280.3906 292.0103 280.3906 172.7207 c
s*u
0 Ap
0 O
0.9294 0.1765 0.9961 0.051 k
1 w3.3398 359.2529 m
4.4736 359.6201 L
6.0859 360.1421 6.8115 361.3657 6.4551 363.8892 c
7.6494 364.2764 L
8.0547 362.9233 8.4199 361.5908 8.8252 360.2378 c
9.2705 358.9634 9.7471 357.6982 10.1914 356.4253 c
8.9971 356.0381 L
8.2188 357.8315 6.9678 358.8442 5.0381 358.2856 c
3.8145 357.8896 L
5.2441 353.4712 L
6.1045 350.8149 6.4619 349.6118 9.4473 350.6768 c
9.7939 349.6016 L
8.0244 349.062 6.2432 348.5513 4.4727 348.0112 c
2.7803 347.4307 1.1289 346.8296 -0.5625 346.249 c
-0.9111 347.3232 L
1.9834 348.1611 1.4697 349.5449 0.6777 351.9932 c
-2.5889 362.083 L
-3.3818 364.5298 -3.7764 365.9521 -6.6133 364.9346 c
-6.9604 366.0098 L
-5.2495 366.5313 -3.5596 367.0127 -1.8477 367.5327 c
1.8447 368.7617 5.4961 370.0093 9.1885 371.2383 c
11.1201 366.1909 L
9.9248 365.8042 L
8.0674 368.9951 5.7227 368.5991 2.708 367.6226 c
0.6182 366.9463 0.8467 366.9546 1.5029 364.9238 C
3.3398 359.2529 l
f*U
*u
15.3955 352.625 m
18.3584 353.1763 17.9814 354.6045 17.4326 357.1182 c
15.166 367.4775 L
14.6162 369.9907 14.3623 371.4453 11.4404 370.71 c
11.2002 371.813 L
12.8311 372.1382 14.4365 372.4248 16.0684 372.7495 c
17.9326 373.1895 19.8193 373.6665 21.6826 374.1055 c
21.9229 373.0024 L
18.96 372.4512 19.3076 371.0176 19.8564 368.5039 c
21.8066 359.584 L
22.4834 356.4878 22.8379 354.5742 26.5781 355.3926 c
30.041 356.1494 31.3291 357.4585 31.4287 361.1094 c
32.7471 361.3979 L
33.8135 355.4976 L
28.2588 354.3149 22.667 353.1558 20.8213 352.7847 c
19.0801 352.3706 17.377 351.9346 15.6367 351.522 C
15.3955 352.625 l
f*U
*u
33.9678 356.6587 m
36.9707 356.9058 36.7422 358.3638 36.4521 360.9204 c
35.2559 371.4585 L
34.9658 374.0142 34.8623 375.4854 31.8799 375.0527 c
31.7529 376.1758 L
33.5322 376.3457 35.2842 376.4819 37.0654 376.6523 c
40.8652 377.1152 44.6934 377.6138 48.4932 378.0762 c
49.3662 372.6177 L
48.0244 372.4648 L
47.1436 375.4912 45.2578 376.2563 42.2646 375.9155 c
41.8906 375.874 39.8955 375.6475 39.7471 375.2827 c
39.6719 375.1167 39.8271 373.7446 39.8564 373.4956 c
40.5107 367.7275 L
43.0352 368.0146 44.6025 368.666 44.3994 371.5796 c
45.6455 371.7217 L
45.7783 370.2837 45.8779 368.8428 46.0107 367.4043 c
46.1865 366.1304 46.3975 364.8281 46.5732 363.5537 c
45.3271 363.4121 L
44.4092 366.2129 43.541 366.6196 40.6738 366.2935 c
41.0869 362.646 L
41.4199 359.7163 41.5381 357.835 45.2178 358.252 c
48.7402 358.6523 49.9912 359.8677 50.3721 363.4795 c
51.6182 363.6206 L
51.7217 362.4331 51.79 361.2715 51.8936 360.084 c
52.0205 359.2456 52.1738 358.4419 52.3018 357.603 c
47.9961 357.146 43.6865 356.7202 39.3799 356.2627 c
37.6064 356.0308 35.8682 355.7695 34.0947 355.5371 C
33.9678 356.6587 l
f*U
*u
71.2744 359.7886 m
69.4629 358.085 66.9268 357.4434 64.4785 357.4287 c
58.2656 357.395 53.8838 361.3857 53.8486 367.6934 c
53.8115 374.125 58.3662 378.7944 64.7676 378.8301 c
67.0273 378.8428 68.9131 378.2881 70.709 376.8857 c
71.1689 378.6777 L
72.5186 378.6841 L
72.8369 372.0967 L
71.457 372.0894 L
70.7813 375.0977 68.7295 377.2827 65.498 377.2651 c
60.6357 377.2373 59.252 372.0532 59.2734 368.0688 c
59.2979 363.7705 60.7988 359.04 65.7891 359.0049 c
69.3975 358.9634 71.2939 361.7344 71.8418 365.0322 c
73.0947 365.0391 L
73.1357 357.9795 L
71.8789 357.9731 L
71.2744 359.7886 l
f*U
*u
82.4424 362.0659 m
82.1367 359.5112 81.9023 358.0547 84.9053 357.792 c
84.7695 356.6704 L
82.9365 356.9204 81.1045 357.2012 79.2705 357.4502 c
77.5547 357.623 75.8643 357.7603 74.1455 357.9326 c
74.2803 359.0542 L
77.2588 358.605 77.3711 360.0771 77.6748 362.6328 c
78.9268 373.1626 L
79.2295 375.7183 79.4648 377.1753 76.4639 377.438 c
76.5947 378.5586 L
78.2744 378.3276 79.9805 378.0615 81.6592 377.8315 c
83.502 377.6436 85.3789 377.4839 87.2217 377.2979 c
87.0869 376.1758 L
84.1064 376.624 83.9961 375.1523 83.6924 372.5972 c
83.1787 368.2661 L
92.4004 367.1714 L
92.916 371.5015 L
93.2188 374.0571 93.4238 375.5171 90.4219 375.7798 c
90.5537 376.9014 L
92.2012 376.6738 93.8145 376.4189 95.4619 376.1909 c
97.3662 375.9966 99.3076 375.8306 101.209 375.6357 c
101.0771 374.5142 L
98.0967 374.9629 97.9854 373.4912 97.6816 370.9355 c
96.4316 360.4048 L
96.127 357.8496 95.8926 356.3936 98.8936 356.1304 c
98.7598 355.0088 L
96.9561 355.2554 95.126 355.5361 93.3223 355.7817 c
91.5732 355.957 89.8535 356.0986 88.1045 356.2744 c
88.2393 357.396 L
91.2168 356.9478 91.3613 358.4155 91.6641 360.9712 c
92.2148 365.6123 L
82.9941 366.709 L
82.4424 362.0659 l
f*U
*u
104.3271 359.1504 m
103.8672 358.4546 103.1719 357.5908 102.9717 356.7681 c
102.6084 355.2739 103.9893 354.8413 105.0938 354.4751 c
104.8281 353.3774 L
103.5557 353.7197 102.2891 354.0923 101.0166 354.4341 c
99.8506 354.6851 98.6768 354.9058 97.5117 355.1582 c
97.7773 356.2554 L
100.2852 355.6772 101.8809 358.3896 103.1328 360.0864 c
112.7012 373.1294 L
114.165 372.7734 L
116.6318 355.5757 L
116.7676 354.6704 117.0059 352.9976 117.4668 352.2393 c
117.8965 351.6187 118.6523 351.2725 119.3623 351.0039 c
119.0967 349.9063 L
117.2734 350.3818 115.459 350.8877 113.6367 351.3633 c
112.0459 351.7183 110.4131 352.0513 108.8223 352.4063 c
109.0879 353.5034 L
110.0313 353.4038 111.6328 352.9492 111.9521 354.2593 c
112.0703 354.7476 111.9346 355.9106 111.8623 356.4126 c
111.6445 358.3057 L
104.9072 359.9458 L
104.3271 359.1504 l
f1 D
111.4072 359.979 m
110.4316 367.644 L
105.8584 361.3291 L
111.4072 359.979 l
f*U
*u
0 D
119.917 349.4653 m
118.6133 349.9209 L
120.7666 356.0811 L
121.9512 355.6665 L
121.8389 352.6816 122.3301 349.7173 125.6191 348.5684 c
127.3369 347.9663 129.3887 348.5117 130.0313 350.3477 c
130.9932 353.1025 128.4102 354.8369 126.6484 356.4512 c
124.3848 358.5381 122.7422 360.7754 123.8818 364.0332 c
125.1553 367.6758 128.625 368.6567 132.0596 367.4551 c
133.6592 366.896 135.1924 365.96 135.9932 364.4492 c
136.7842 365.4697 L
138.0557 365.0244 L
136.3691 359.6318 L
135.0977 360.0771 L
135.3613 362.5435 134.3682 365.1187 131.79 366.0205 c
130.3389 366.5278 128.5684 366.2168 128.0068 364.6177 c
127.2324 362.396 129.2646 360.9863 130.6826 359.6265 c
133.375 357.1548 135.8809 354.7173 134.4922 350.7485 c
133.0938 346.7505 128.9912 345.8579 125.3486 347.1323 c
123.4531 347.7949 121.7578 349.1206 120.9014 350.9487 C
119.917 349.4653 l
f*U
*u
170.5947 343.4849 m
169.9697 343.8413 L
170.3057 345.2002 170.6826 346.502 169.749 347.7168 c
168.8701 348.9004 167.2969 349.7549 165.9883 350.4985 c
164.8975 351.1172 164.4092 351.4668 163.9736 351.4604 c
163.7471 351.4453 163.415 350.9839 162.9658 350.1934 c
159.498 344.0801 L
163.1455 341.7949 164.543 342.9863 165.8223 344.8589 c
166.4482 344.5029 L
165.7236 343.2896 164.9854 342.0508 164.2334 340.853 c
163.6543 339.7036 163.0322 338.541 162.4248 337.4067 c
161.7959 337.7622 L
163.0391 340.8452 161.623 341.7197 159.0039 343.2056 c
157.0537 339.7666 L
156.5752 338.9204 155.4287 336.9014 155.2832 336.0088 c
155.0752 334.6851 156.5361 334.145 157.46 333.5493 c
157.1035 332.9214 L
155.7266 333.7378 154.3398 334.5972 152.9629 335.4136 c
151.5557 336.1768 150.1592 336.895 148.6973 337.689 c
149.0537 338.3159 L
149.9277 337.8208 151.0459 337.186 151.9277 337.9131 c
152.6182 338.4956 153.7637 340.5142 154.2578 341.3882 c
158.624 349.0854 L
159.1172 349.959 160.2627 351.978 160.4063 352.8701 c
160.5811 353.9985 159.46 354.6338 158.5859 355.1284 c
158.9424 355.7563 L
160.5918 354.7856 162.1719 353.8179 163.7676 352.8774 c
166.7021 351.2476 169.6533 349.6465 172.5898 348.0181 C
170.5947 343.4849 l
f*U
*u
174.957 338.1128 m
169.4111 329.707 L
168.3223 327.9434 167.5166 327.3481 169.499 325.8521 c
169.1514 325.3286 L
168.2803 325.9419 167.3447 326.6333 166.4209 327.2813 c
165.3818 327.9292 164.3262 328.5513 163.2861 329.1987 c
163.6328 329.7236 L
165.6563 328.5752 165.915 329.3066 167.0801 331.0176 c
169.5537 334.7632 L
169.8818 335.2607 171.2129 337.2773 171.3672 337.7393 c
171.6143 338.5151 170.4814 339.1875 169.9404 339.5078 c
170.2842 340.0313 L
174.957 338.1128 l
f175.2061 344.6406 m
175.7246 345.4263 176.7686 345.6401 177.5537 345.1221 c
178.3389 344.603 178.5273 343.5767 178.0088 342.792 c
177.5078 342.0317 176.4902 341.8008 175.7559 342.2852 c
174.9707 342.8037 174.6719 343.8291 175.2061 344.6406 c
f*U
*u
182.1553 318.6001 m
179.8809 318.0386 177.9688 318.4219 176.0918 319.8413 c
172.9893 322.1885 172.082 326.2954 174.5049 329.4995 c
176.8701 332.6274 181.3848 333.6582 184.6396 331.1973 c
187.0938 329.3438 188.3789 326.207 186.334 323.5044 c
186.0898 323.1792 185.7891 323.563 185.5381 323.752 c
178.3555 329.1831 L
177.3486 328.0566 L
175.5508 325.6797 174.7959 322.0806 177.4727 320.0562 c
178.752 319.0903 180.5186 319.0903 182.0273 319.5234 C
182.1553 318.6001 l
f1 D
183.123 326.6416 m
183.5234 326.3389 184.252 325.5889 184.7275 326.2144 c
185.9004 327.7671 185.8057 329.4111 184.2295 330.603 c
182.3525 332.0225 180.5244 331.1636 178.9922 329.7642 C
183.123 326.6416 l
f*U
*u
0 D
182.8135 314.8286 m
182.5752 315.0352 L
185.4316 318.4971 L
185.9043 318.0845 L
184.9629 316.2422 184.4668 314.0518 186.2148 312.5239 c
187.2549 311.6162 188.6533 311.3101 189.6445 312.4448 c
190.8193 313.792 189.9258 315.5322 189.3633 316.9395 c
188.6104 318.8467 187.8262 320.9053 189.375 322.6777 c
190.7988 324.3086 193.1514 324.3789 194.7813 322.9551 c
195.5146 322.3149 196.2275 321.3174 196.5576 320.3618 c
197.5264 320.5161 L
197.8105 320.2695 L
195.1816 317.356 L
194.709 317.7681 L
195.3174 319.3218 195.8896 321.0288 194.4023 322.3286 c
193.6221 323.0093 192.4971 323.1997 191.7539 322.3501 c
190.6807 321.1201 191.6074 319.5601 192.0732 318.2803 c
192.9629 316.0044 193.9141 314.0908 192.0557 311.9629 c
190.3643 310.0254 187.6797 310.2881 185.8574 311.8774 c
184.96 312.6616 184.2158 313.8125 184.001 314.998 C
182.8135 314.8286 l
f*U
*u
199.8154 316.5854 m
200.2109 316.9893 L
201.9707 316.5439 203.9678 316.3462 205.6895 317.1655 c
206.0264 316.8364 L
203.4629 314.2104 L
206.0205 311.7114 L
205.4297 311.1055 L
202.8691 313.604 L
196.6221 307.2056 L
195.6367 306.1958 194.8066 304.9429 195.9971 303.7813 c
196.7842 303.0137 197.626 303.0684 198.5996 303.2139 c
198.7197 302.5264 L
197.2617 301.8442 195.7891 302.5811 194.7109 303.6328 c
193.0947 305.2114 192.6104 306.9141 194.2539 308.5972 c
200.96 315.4668 L
199.8154 316.5854 l
f*U
*u
209.5986 300.8618 m
209.9248 300.7334 210.1855 301.0522 210.4414 301.2827 c
212.0303 302.709 213.0244 303.8545 211.3057 305.769 c
210.2588 306.936 209.3047 307.8096 208.0049 306.7681 c
207.4482 306.353 206.6631 306.1958 206.1387 306.7798 c
205.6768 307.293 205.668 307.9595 206.1826 308.4204 c
207.9092 309.9722 211.0234 307.1616 212.0938 305.9712 c
214.4209 303.3794 214.8135 301.5815 212.1289 299.1709 c
208.2773 295.7109 L
207.6934 295.1865 205.8818 293.7285 206.7012 292.8179 c
207.1201 292.3511 207.75 292.4951 208.3066 292.5322 c
208.4717 291.8794 L
207.3672 291.5601 205.7969 291.7109 205.0195 292.5747 c
204.1631 293.5317 204.1504 294.999 204.875 296.0708 c
203.0029 296.3716 201.0166 297.0337 199.7178 298.4805 c
198.6064 299.7178 198.2832 301.5796 199.5908 302.7534 c
201.5518 304.5142 204.3818 303.0518 206.4004 302.1655 C
209.5986 300.8618 l
f1 D
209.2031 300.127 m
207.2666 300.9199 203.9678 302.7637 202.0996 301.0859 c
201.2363 300.3101 200.9023 299.0396 201.7627 298.0825 c
202.5791 297.1719 204.1816 296.7974 205.3975 296.71 C
209.2031 300.127 l
f*U
*u
0 D
207.6436 289.7607 m
207.4482 290.0073 L
210.9072 292.8687 L
211.2949 292.374 L
210.0195 290.7417 209.1201 288.6851 210.5479 286.8555 c
211.3965 285.7676 212.7148 285.2026 213.9004 286.1294 c
215.3115 287.231 214.7588 289.1089 214.4736 290.5972 c
214.0957 292.6104 213.7148 294.7817 215.5693 296.2305 c
217.2744 297.5615 219.5977 297.1875 220.9297 295.481 c
221.5293 294.7148 222.041 293.6011 222.1846 292.6001 c
223.166 292.5688 L
223.3975 292.272 L
220.2666 289.9077 L
219.8818 290.4014 L
220.7715 291.812 221.6553 293.3804 220.4375 294.938 c
219.8018 295.7534 218.7334 296.1538 217.8418 295.458 c
216.5566 294.4541 217.1738 292.7456 217.3896 291.4019 c
217.8311 289 218.4053 286.9399 216.1797 285.2017 c
214.1523 283.6177 211.5625 284.3833 210.0771 286.2871 c
209.3428 287.2271 208.8271 288.4971 208.8418 289.7021 C
207.6436 289.7607 l
f*U
*u
223.6738 266.4043 m
224.1035 267.0786 224.6992 267.6689 225.3682 268.1963 c
223.2705 268.4814 221.8848 269.2827 220.7598 271.0947 c
218.6729 274.4531 219.8184 278.3779 223.123 280.4316 c
226.373 282.4521 230.7295 281.981 232.832 278.5957 c
233.7432 277.1299 234.0723 275.4131 233.5498 273.7583 c
237.7588 276.374 L
239.3564 277.3672 240.1611 277.9766 239.0215 279.9297 c
239.5537 280.2612 L
243.0576 276.5259 L
229.5967 268.1641 L
228.8525 267.7017 227.5186 266.8735 226.9922 266.1758 c
226.2744 265.25 226.7744 264.563 227.3057 263.7114 c
226.7725 263.3789 L
223.6738 266.4043 l
f1 D
231.6279 272.5654 m
233.3076 273.6089 233.3369 275.8809 232.377 277.4263 c
230.5889 280.3052 227.0967 279.207 224.7783 277.7661 c
222.3799 276.2759 220.0869 273.7808 221.876 270.9028 c
223.3662 268.5039 225.7393 268.9063 227.8447 270.2148 C
231.6279 272.5654 l
f*U
*u
0 D
234.5557 251.5146 m
232.2686 252.0112 230.7207 253.1992 229.6611 255.2998 c
227.9102 258.7744 228.9072 262.8608 232.4941 264.6694 c
235.9961 266.4351 240.5029 265.3687 242.3398 261.7256 c
243.7227 258.981 243.4961 255.5972 240.4707 254.0728 c
240.1055 253.8896 240.0059 254.3662 239.8652 254.6465 c
235.8105 262.687 L
234.4111 262.1216 L
231.749 260.7793 229.4844 257.8818 230.9961 254.8838 c
231.7158 253.4551 233.3027 252.6748 234.8477 252.3984 C
234.5557 251.5146 l
f1 D
238.9678 258.3057 m
239.1934 257.8574 239.5205 256.8618 240.2207 257.2158 c
241.958 258.0908 242.5986 259.6079 241.709 261.3735 c
240.6494 263.4751 238.6299 263.5103 236.6377 262.9282 C
238.9678 258.3057 l
f*U
*u
0 D
250.6084 245.6914 m
251.5527 246.0298 253.7402 246.813 254.4316 247.3936 c
255.2988 248.1377 254.8652 249.3491 254.5264 250.2944 c
255.2051 250.5376 L
255.6836 249.1099 256.1221 247.7002 256.5996 246.271 c
257.1699 244.7754 257.7578 243.3198 258.3271 241.8237 c
257.6465 241.5811 L
257.3086 242.5264 256.874 243.7373 255.7324 243.7607 c
254.8301 243.77 252.6426 242.9868 251.6992 242.6484 c
242.9541 239.5166 L
239.1758 238.1626 238.7656 237.3496 240.1104 233.5972 c
240.6064 232.2095 241.1201 230.5938 242.3506 229.6675 c
243.7949 228.519 244.9814 228.7437 246.7305 229.0708 c
246.9951 228.332 L
241.6719 226.7251 L
241.5225 227.2373 241.3613 227.7803 241.2402 228.3042 c
239.332 233.3521 237.502 238.4619 235.6514 243.5322 c
236.3301 243.7749 L
236.6689 242.8306 237.1025 241.6196 238.2451 241.5952 c
239.1475 241.5854 241.335 242.3687 242.2793 242.707 C
250.6084 245.6914 l
f*U
*u
252.3232 212.2939 m
248.2178 211.2617 244.5449 213.8979 243.5449 217.8843 c
242.5508 221.8403 244.75 225.9521 248.7676 226.9614 c
252.6631 227.9399 256.3965 225.0615 257.3281 221.3481 c
258.2764 217.5752 256.251 213.2803 252.3232 212.2939 c
f1 D
249.4121 223.8877 m
246.5205 223.1611 243.3867 221.4678 244.2822 217.9072 c
245.1162 214.5903 248.6689 214.6108 251.377 215.291 c
254.2988 216.0254 257.501 217.7036 256.5977 221.2944 c
255.7637 224.6108 252.0576 224.5532 249.4121 223.8877 c
f*U
*u
0 D
260.5068 206.2559 m
250.5889 204.502 L
248.5586 204.0791 247.5732 204.2554 247.8496 201.7876 c
247.2324 201.6777 L
247.0781 202.7344 246.9375 203.8877 246.7715 205.0059 c
246.5264 206.2056 246.252 207.3989 246.0068 208.5986 c
246.625 208.708 L
247.1836 206.4487 247.8936 206.7661 249.9385 207.0952 c
254.3564 207.877 L
254.9434 207.981 257.3213 208.4014 257.7627 208.6074 c
258.499 208.9604 258.207 210.2466 258.0664 210.8589 c
258.6846 210.9678 L
260.5068 206.2559 l
f262.625 210.4868 m
267.3096 206.3447 L
267.6826 206.0288 268.1719 205.605 268.2598 205.1099 c
268.3701 204.4927 267.957 203.9419 267.3711 203.8379 c
266.3506 203.6567 265.8271 204.8076 265.3525 205.5195 c
262.8271 209.3442 L
262.625 210.4868 l
f*U
*u
248.9072 188.7783 m
247.5918 200.1221 L
261.123 193.4834 L
260.79 196.3501 L
260.5361 198.5317 260.4004 199.6855 257.917 199.8706 c
257.8467 200.4624 L
261.0273 200.5474 L
262.249 190.0444 L
248.7188 196.6533 L
249.1045 193.3486 L
249.3896 190.8867 249.5791 189.8037 252.3389 189.4302 c
252.4004 188.8999 L
248.9072 188.7783 l
f*U
*u
257.9404 179.3867 m
258.1113 179.0791 258.5166 179.1597 258.8604 179.1748 c
260.9932 179.2637 262.4893 179.5161 262.3799 182.0864 c
262.3135 183.6538 262.1338 184.9331 260.4688 184.9575 c
259.7783 184.9912 259.0713 185.3701 259.0381 186.1523 c
259.0088 186.8428 259.4277 187.3633 260.1152 187.3916 c
262.4346 187.4902 263.0498 183.3384 263.1172 181.7402 c
263.2656 178.2607 262.4229 176.624 258.8174 176.4712 c
253.6455 176.2534 L
252.8604 176.2202 250.5371 176.2476 250.5889 175.0254 c
250.6143 174.3989 251.1914 174.1089 251.6445 173.7822 c
251.3564 173.1733 L
250.3008 173.6309 249.1855 174.7466 249.1377 175.9063 c
249.083 177.1914 250.0088 178.3291 251.25 178.6958 c
249.998 180.1191 248.8848 181.8936 248.8027 183.8369 c
248.7334 185.499 249.668 187.1406 251.4248 187.2139 c
254.0576 187.3247 255.3125 184.3945 256.3057 182.4263 C
257.9404 179.3867 l
f1 D
257.1699 179.0713 m
256.1787 180.9141 254.8086 184.436 252.2979 184.3301 c
251.1396 184.2813 250.0732 183.5137 250.127 182.229 c
250.1787 181.0063 251.1758 179.6978 252.0586 178.855 C
257.1699 179.0713 l
f*U
*u
0 D
263.9912 163.0381 m
264.9912 162.9609 267.3057 162.7832 268.1758 163.0293 c
269.2695 163.3555 269.3682 164.6367 269.4453 165.6396 c
270.291 165.5732 L
269.0908 150.0254 L
264.3682 150.3906 L
264.4229 151.1084 L
268.1289 151.4209 268.4736 153.0303 268.7305 156.3467 c
268.9023 158.6006 L
268.9404 159.0703 268.9873 159.2852 268.8389 159.3926 c
268.7178 159.4639 268.3711 159.459 267.6826 159.5107 c
260.2695 160.083 L
259.75 155.8125 261.4854 155.0488 263.7236 154.6875 c
263.667 153.9688 L
262.2637 154.1084 260.8252 154.25 259.4219 154.4229 c
258.1348 154.458 256.8193 154.5283 255.5342 154.5947 c
255.5898 155.3145 L
258.9082 155.5 259.1943 157.1455 259.4248 160.1494 c
254.2949 160.5439 L
253.3555 160.6182 251.8848 160.7314 251.0918 160.2246 c
249.9326 159.498 249.7207 157.5615 249.6563 156.3076 c
249.4678 153.0508 249.708 150.8906 253.4014 150.1982 c
253.3447 149.4785 L
248.3291 150.1484 L
249.6436 167.167 L
250.3623 167.1104 L
250.2852 166.1104 250.1885 164.8262 251.2188 164.3379 c
252.04 163.96 254.3545 163.7803 255.3545 163.7031 C
263.9912 163.0381 l
f*U
*u
249.2002 133.1709 m
247.1621 133.5371 246.2793 133.9492 245.6943 131.5674 c
245.0752 131.6787 L
245.3066 132.7832 245.5723 133.917 245.8027 135.0234 c
245.9873 136.2334 246.1348 137.418 246.3193 138.6279 c
246.9385 138.5176 L
246.6777 136.1738 247.4473 136.1943 249.4863 135.8291 c
253.4385 135.1211 L
255.5684 134.7393 258.5801 134.1035 259.1055 137.0391 c
259.5371 139.4482 257.9307 141.3291 255.6758 141.7334 c
250.8877 142.5918 L
248.8506 142.9551 247.9736 143.4004 247.3818 140.9883 c
246.7637 141.0996 L
246.9922 142.2051 247.2598 143.3369 247.4912 144.4434 c
247.6758 145.6533 247.8252 146.8389 248.0088 148.0479 c
248.6279 147.9375 L
248.3662 145.5938 249.1357 145.6152 251.1738 145.249 c
254.9717 144.5684 L
255.8369 144.4141 257.998 144.0244 258.7363 144.0527 c
259.8926 144.1006 259.9189 144.957 260.0967 145.9453 c
260.7129 145.834 L
260.6113 144.1973 260.9004 142.9648 260.9072 141.4004 c
258.0244 141.5039 L
258.0146 141.4424 L
259.7344 140.0176 260.332 138.1895 259.9385 135.9961 c
259.4131 133.0615 257.7861 131.6328 254.8525 132.1572 C
249.2002 133.1709 l
f*U
*u
257.46 100.9707 m
257.3164 100.5225 L
251.3584 102.1904 L
251.5811 102.877 L
255.0566 102.3115 258.1406 103.8828 259.2637 107.3457 c
260.9961 112.6875 256.2354 116.0127 251.7598 117.4639 c
247.252 118.9268 241.8877 118.7549 240.1729 113.4688 c
238.8193 109.293 241.3096 106.8027 244.6016 104.7451 c
244.4248 104.208 L
237.8887 106.3291 L
238.0156 106.7158 L
239.7705 106.9395 L
238.8359 109.4502 238.8379 111.6934 239.6709 114.2598 c
241.6357 120.3213 246.8809 123.1699 252.9697 121.1953 c
259.0273 119.2305 261.9932 113.4209 260.0273 107.3613 c
259.2344 104.9141 258.1631 103.5469 256.2129 101.9014 C
257.46 100.9707 l
f*U
*u
236.9004 88.2959 m
233.0244 90.0078 231.7529 94.3447 233.4141 98.1055 c
235.0635 101.835 239.3311 103.7236 243.1182 102.0479 c
246.791 100.4238 247.9619 95.8584 246.4131 92.3555 c
244.8418 88.7979 240.6016 86.6602 236.9004 88.2959 c
f1 D
241.7334 99.2295 m
239.0068 100.4336 235.4951 101.0273 234.0107 97.6699 c
232.6279 94.541 235.4434 92.3711 237.9961 91.2412 c
240.751 90.0234 244.3066 89.3779 245.8037 92.7627 c
247.1885 95.8906 244.2305 98.127 241.7334 99.2295 c
f*U
*u
0 D
226.1357 74.9834 m
224.3301 75.999 223.6328 76.6777 222.2979 74.6211 c
221.752 74.9287 L
222.3301 75.8975 222.9551 76.8799 223.5352 77.8486 c
224.1074 78.9307 224.6377 80.002 225.2109 81.082 c
225.7568 80.7754 L
224.7393 78.6465 225.4727 78.415 227.2773 77.3984 c
230.7793 75.4326 L
232.667 74.3721 235.3018 72.7822 236.7617 75.3809 c
237.96 77.5137 237.0615 79.8203 235.0635 80.9414 c
230.8242 83.3252 L
229.0205 84.3408 228.3389 85.0479 226.9873 82.9629 c
226.4395 83.2705 L
227.0215 84.2393 227.6445 85.2217 228.2256 86.1914 c
228.7979 87.2725 229.3271 88.3438 229.8984 89.4238 c
230.4463 89.1172 L
229.4297 86.9893 230.1641 86.7568 231.9678 85.7412 c
235.332 83.8496 L
236.0986 83.4199 238.0127 82.3447 238.7197 82.1279 c
239.8252 81.792 240.1318 82.5938 240.625 83.4678 c
241.1699 83.1602 L
240.5361 81.6455 240.4043 80.3877 239.8955 78.9092 c
237.208 79.9531 L
237.1768 79.8994 L
238.3359 77.9863 238.2969 76.0645 237.2061 74.123 c
235.748 71.5244 233.7393 70.709 231.1416 72.1689 C
226.1357 74.9834 l
f*U
*u
215.6982 59.5244 m
214.0029 60.7119 213.374 61.459 211.8428 59.542 c
211.3271 59.9014 L
212.0029 60.8105 212.7188 61.7246 213.3936 62.6318 c
214.0684 63.6533 214.7002 64.665 215.3789 65.6865 c
215.8926 65.3252 L
214.6699 63.3086 215.3789 63.0049 217.0742 61.8164 c
220.3633 59.5146 L
222.1367 58.2715 224.6016 56.4307 226.3115 58.873 c
227.7139 60.8789 227.0459 63.2617 225.1719 64.5742 c
221.1865 67.3652 L
219.4912 68.5508 218.8818 69.3213 217.3301 67.3828 c
216.8174 67.7432 L
217.4902 68.6494 218.207 69.5654 218.8818 70.4717 c
219.5576 71.4922 220.1895 72.5049 220.8662 73.5264 c
221.3799 73.166 L
220.1572 71.1484 220.8662 70.8457 222.5615 69.6563 c
225.7246 67.4424 L
226.4434 66.9385 228.2412 65.6787 228.9248 65.3936 c
229.9912 64.9521 230.376 65.7188 230.9512 66.541 c
231.4648 66.1816 L
230.6846 64.7363 230.4297 63.4971 229.7783 62.0771 c
227.2061 63.3809 L
227.168 63.3281 L
228.1348 61.3115 227.9082 59.4043 226.6299 57.5771 c
224.9199 55.1357 222.8447 54.5234 220.4014 56.2314 C
215.6982 59.5244 l
f*U
*u
203.7344 47.293 m
203.2939 49.5947 203.7793 51.4834 205.2959 53.2813 c
207.8066 56.2549 211.9561 56.9404 215.0264 54.3496 c
218.0234 51.8203 218.8105 47.2568 216.1797 44.1377 c
214.1973 41.79 210.9961 40.6719 208.4053 42.8574 c
208.0947 43.1211 208.4951 43.3994 208.6982 43.6377 c
214.5039 50.5205 L
213.4346 51.5869 L
211.1563 53.5107 207.6025 54.457 205.4365 51.8906 c
204.4063 50.668 204.3105 48.9004 204.6621 47.3721 C
203.7344 47.293 l
f1 D
211.71 45.8984 m
211.3877 45.5156 210.5996 44.8252 211.1992 44.3184 c
212.6846 43.0635 214.333 43.0703 215.6084 44.5801 c
217.124 46.3789 216.3662 48.25 215.0508 49.8535 C
211.71 45.8984 l
f*U
*u
0 D
193.0625 36.708 m
192.8291 38.792 193.7949 40.8838 195.2266 42.335 c
197.9619 45.1006 201.9326 45.1895 204.7012 42.4551 c
207.8252 39.3672 207.7432 34.7744 204.6768 31.6738 c
203.8164 30.8018 201.54 29.0381 200.3135 30.25 c
199.9111 30.6475 199.8184 31.4014 200.2148 31.8018 c
200.7441 32.3369 201.4775 32.1875 202.0557 31.9238 c
202.9893 31.5293 203.3457 31.5313 204.1592 32.3584 c
206.543 34.7695 204.8164 37.9297 202.8535 39.8721 c
200.71 41.9883 197.7949 43.5029 195.3018 40.9805 c
194.1992 39.8652 193.8076 38.3105 193.9287 36.7803 C
193.0625 36.708 l
f*U
*u
198.4053 27.542 m
198.7813 27.1211 L
198.2148 25.3975 197.8799 23.417 198.5752 21.6426 c
198.2236 21.3301 L
195.7842 24.0732 L
193.1104 21.6934 L
192.5479 22.3252 L
195.2188 24.7051 L
189.2715 31.3828 L
188.334 32.4375 187.1416 33.3496 185.9004 32.2451 c
185.0791 31.5166 185.0752 30.6719 185.1514 29.6895 c
184.459 29.6182 L
183.8789 31.1182 184.7178 32.5352 185.8418 33.5371 c
187.5293 35.0391 189.2627 35.4072 190.8271 33.6484 c
197.2119 26.4775 L
198.4053 27.542 l
f*U
*u
188.085 16.916 m
181.7646 24.7549 L
180.417 26.3301 180.0957 27.2783 178.0664 25.8457 c
177.6738 26.335 L
178.5234 26.9805 179.4668 27.6592 180.3662 28.3428 c
181.2988 29.1348 182.2129 29.9521 183.1455 30.7441 c
183.5391 30.2559 L
181.8281 28.6777 182.4502 28.209 183.7246 26.5762 c
186.5391 23.082 L
186.9121 22.6201 188.4297 20.7383 188.8232 20.4512 c
189.4854 19.9785 190.4727 20.8525 190.9414 21.2705 c
191.333 20.7822 L
188.085 16.916 l
f194.2285 14.6924 m
194.8184 13.9609 194.7061 12.9004 193.9707 12.3115 c
193.2393 11.7197 192.2061 11.8535 191.6143 12.585 c
191.042 13.2959 191.1318 14.334 191.8164 14.8848 c
192.5498 15.4756 193.6172 15.4502 194.2285 14.6924 c
f*U
*u
167.5 16.4131 m
167.6299 18.5068 168.9404 20.3994 170.6035 21.5801 c
173.7744 23.8359 177.7031 23.2354 179.9551 20.0654 c
182.498 16.4834 181.623 11.9736 178.0664 9.4492 c
177.0684 8.7412 174.5234 7.3945 173.5244 8.7998 c
173.1963 9.2598 173.2354 10.0176 173.6943 10.3457 c
174.3105 10.7832 175.0049 10.5068 175.5303 10.1494 c
176.3809 9.5986 176.7314 9.54 177.6787 10.2119 c
180.4404 12.1748 179.2861 15.5889 177.6865 17.8389 c
175.9434 20.2949 173.333 22.2891 170.4414 20.2363 c
169.1641 19.3281 168.5098 17.8623 168.3633 16.3359 C
167.5 16.4131 l
f*U
*u
163.6738 10.5674 m
162.7334 12.1621 161.3262 14.2461 159.2168 13.0049 c
157.0811 11.7451 156.6426 8.9043 157.8691 6.8223 c
160.001 3.2002 L
161.2109 1.1436 161.415 0.4277 163.8242 1.4082 c
164.1406 0.8682 L
163.3525 0.4766 162.6055 0.0732 161.8184 -0.3193 c
161.1465 -0.7861 160.4326 -1.2441 159.7881 -1.6973 c
154.6621 7.0117 L
154.2324 7.7402 153.5967 8.8223 152.5947 8.2334 c
152.2705 8.042 151.9502 7.7813 151.6162 7.5459 c
151.249 8.168 L
154.4346 11.3555 L
156.499 9.1465 L
156.5957 11.208 157.708 13.2813 159.5186 14.3477 c
162.248 15.9561 164.125 15.0566 165.5254 12.6777 c
168.2471 8.0527 L
169.458 5.999 169.6621 5.2822 172.0713 6.2646 c
172.3721 5.751 L
171.5996 5.3301 170.8369 4.9551 170.0654 4.5371 c
169.377 4.0957 168.6787 3.6123 168.0195 3.1865 C
163.6738 10.5674 l
f*U
*u
154.8555 -2.9717 m
155.1035 -3.4766 L
154.0996 -4.9863 153.248 -6.8057 153.4463 -8.7031 c
153.0234 -8.9102 L
151.4023 -5.6172 L
148.1934 -7.1982 L
147.8184 -6.4375 L
151.0273 -4.8555 L
147.0752 3.1631 L
146.4502 4.4287 145.5439 5.6279 144.0537 4.8926 c
143.0674 4.4082 142.8398 3.5947 142.6514 2.6279 c
141.9648 2.7441 L
141.8047 4.3447 142.9902 5.4873 144.3428 6.1553 c
146.3672 7.1523 148.1357 7.0439 149.1738 4.9336 c
153.4199 -3.6777 L
154.8555 -2.9717 l
f*U
*u
124.6777 -4.8506 m
125.417 -2.626 126.7627 -1.2158 128.9648 -0.3867 c
132.6045 0.9844 136.5615 -0.4434 137.9766 -4.2021 c
139.3574 -7.875 137.8174 -12.2441 134 -13.6787 c
131.1201 -14.7607 127.7832 -14.1729 126.5898 -11.001 c
126.4453 -10.6201 126.9297 -10.5713 127.2246 -10.46 c
135.6523 -7.291 L
135.2393 -5.8359 L
134.1895 -3.0469 131.5508 -0.4863 128.4072 -1.6699 c
126.9111 -2.2314 125.9629 -3.7275 125.5254 -5.2334 C
124.6777 -4.8506 l
f1 D
130.957 -9.9619 m
130.4883 -10.1387 129.4629 -10.3564 129.7383 -11.0908 c
130.4268 -12.9121 131.8652 -13.71 133.7168 -13.0137 c
135.9189 -12.1846 136.1689 -10.1807 135.8037 -8.1377 C
130.957 -9.9619 l
f*U
*u
0 D
108.7402 -10.9941 m
108.1924 -8.998 108.1836 -8.0225 105.7813 -8.5215 c
105.6162 -7.916 L
106.7129 -7.6484 107.8486 -7.4014 108.9463 -7.1309 c
110.1172 -6.7744 111.25 -6.3984 112.4209 -6.043 c
112.5879 -6.6475 L
110.3613 -7.4238 110.7129 -8.1094 111.2617 -10.1045 c
112.3281 -13.9766 L
112.9033 -16.0645 113.6279 -19.0537 116.5029 -18.2627 c
118.8623 -17.6133 119.8662 -15.3525 119.2578 -13.1436 c
117.9668 -8.4541 L
117.417 -6.458 117.4404 -5.4756 115.0088 -5.9834 c
114.8418 -5.3779 L
115.9395 -5.1064 117.0742 -4.8604 118.1709 -4.5898 c
119.3438 -4.2354 120.4766 -3.8594 121.6484 -3.501 c
121.8154 -4.1074 L
119.5879 -4.8848 119.9375 -5.5684 120.4883 -7.5645 c
121.5117 -11.2861 L
121.7451 -12.1318 122.3291 -14.251 122.6719 -14.9043 c
123.2148 -15.9268 123.9961 -15.582 124.9648 -15.3154 c
125.1318 -15.9199 L
123.6094 -16.5352 122.624 -17.3262 121.2139 -18.0068 c
120.0654 -15.3613 L
120.0049 -15.3789 L
119.4609 -17.5469 118.0693 -18.8721 115.9209 -19.4648 c
113.0479 -20.2539 111.0537 -19.4043 110.2656 -16.5313 C
108.7402 -10.9941 l
f*U
*u
93.2559 -16.2051 m
93.1357 -15.21 92.8535 -12.9043 92.4414 -12.1016 c
91.9072 -11.0908 90.6299 -11.2471 89.6338 -11.3672 c
89.5469 -10.6514 L
91.0449 -10.502 92.5801 -10.377 94.0771 -10.2266 c
95.6309 -10.0059 97.2119 -9.751 98.7344 -9.5332 c
98.8223 -10.25 L
97.8242 -10.3711 96.5479 -10.5273 96.2725 -11.6348 c
96.0615 -12.5137 96.3438 -14.8184 96.4648 -15.8145 c
97.5352 -24.5986 L
97.6553 -25.5938 97.9355 -27.9004 98.3496 -28.7031 c
98.8818 -29.7139 100.1602 -29.5576 101.1572 -29.4375 c
101.2441 -30.1523 L
99.7764 -30.2988 98.2725 -30.4199 96.7754 -30.5693 c
95.1895 -30.7949 93.6396 -31.0469 92.0557 -31.2705 c
91.9678 -30.5537 L
92.9648 -30.4326 94.2432 -30.2773 94.5195 -29.1699 c
94.7266 -28.292 94.4463 -25.9854 94.3262 -24.9893 c
93.8857 -21.377 L
82.7656 -22.7295 L
83.2051 -26.3418 L
83.3252 -27.3389 83.6084 -29.6436 84.0205 -30.4463 c
84.5566 -31.4561 85.832 -31.2998 86.8291 -31.1797 c
86.916 -31.8955 L
85.3877 -32.0518 83.8848 -32.1699 82.3545 -32.3252 c
80.8008 -32.5459 79.2822 -32.7939 77.7275 -33.0146 c
77.6416 -32.2988 L
78.6387 -32.1758 79.9141 -32.0225 80.1904 -30.9131 c
80.4004 -30.0342 80.1191 -27.7285 79.998 -26.7324 c
78.9297 -17.9492 L
78.8076 -16.9521 78.5283 -14.6484 78.1133 -13.8457 c
77.5791 -12.8369 76.3037 -12.9902 75.3057 -13.1133 c
75.2178 -12.3965 L
76.7168 -12.2451 78.251 -12.1221 79.751 -11.9707 c
81.3037 -11.751 82.8535 -11.498 84.4072 -11.2773 c
84.4932 -11.9941 L
83.498 -12.1143 82.2197 -12.2705 81.9434 -13.3789 c
81.7354 -14.2588 82.0146 -16.5605 82.1367 -17.5596 c
82.6455 -21.7334 L
93.7637 -20.3799 L
93.2559 -16.2051 l
f*U
*u
58.5508 -19.1973 m
58.5146 -14.9629 61.9385 -12.0156 66.0488 -11.9785 c
70.1289 -11.9434 73.6064 -15.0508 73.6416 -19.1914 c
73.6787 -23.207 70.002 -26.1582 66.1738 -26.1914 c
62.2822 -26.2266 58.5869 -23.2461 58.5508 -19.1973 c
f1 D
70.5049 -19.0947 m
70.4785 -16.1143 69.5703 -12.6699 65.8994 -12.7012 c
62.4785 -12.7305 61.6621 -16.1904 61.6865 -18.9844 c
61.7129 -21.9961 62.5898 -25.501 66.292 -25.4707 c
69.7119 -25.4395 70.5273 -21.8242 70.5049 -19.0947 c
f*U
*u
0 D
41.9697 -14.9082 m
42.1475 -12.8438 42.4775 -11.9277 40.0537 -11.5615 c
40.1064 -10.9375 L
41.2285 -11.0664 42.3809 -11.2275 43.5029 -11.3545 c
44.7256 -11.4277 45.9189 -11.4668 47.1396 -11.541 c
47.0869 -12.165 L
44.7295 -12.1201 44.8213 -12.8848 44.6445 -14.9463 c
44.3018 -18.9492 L
44.1162 -21.1064 43.7607 -24.1631 46.7295 -24.416 c
49.1689 -24.627 50.8955 -22.8516 51.0908 -20.5693 c
51.5049 -15.7256 L
51.6816 -13.6611 52.0439 -12.7461 49.5869 -12.3789 c
49.6416 -11.7549 L
50.7637 -11.8838 51.915 -12.0449 53.0381 -12.1719 c
54.2598 -12.2451 55.4531 -12.2842 56.6758 -12.3584 c
56.6221 -12.9814 L
54.2627 -12.9365 54.3545 -13.7021 54.1787 -15.7637 c
53.8486 -19.6104 L
53.7744 -20.4854 53.5869 -22.6729 53.6816 -23.4063 c
53.835 -24.5527 54.6904 -24.499 55.6904 -24.585 c
55.6367 -25.2109 L
53.9951 -25.2607 52.7959 -25.6611 51.2393 -25.8105 c
51.0771 -22.9307 L
51.0146 -22.9248 L
49.7539 -24.7695 47.9883 -25.5332 45.7686 -25.3418 c
42.7988 -25.0859 41.2256 -23.5986 41.4814 -20.6279 C
41.9697 -14.9082 l
f*U
*u
22.2236 -14.6416 m
22.9854 -10.4746 26.9053 -8.2266 30.9482 -8.9639 c
34.9619 -9.6992 37.792 -13.4053 37.0459 -17.4805 c
36.3232 -21.4297 32.1572 -23.6328 28.3916 -22.9473 c
24.5645 -22.2461 21.4951 -18.623 22.2236 -14.6416 c
f1 D
33.9824 -16.791 m
34.5195 -13.8604 34.2764 -10.3066 30.665 -9.6455 c
27.3008 -9.0313 25.8467 -12.2734 25.3438 -15.0215 c
24.8018 -17.9844 25.0029 -21.5928 28.6455 -22.2578 c
32.0098 -22.873 33.4922 -19.4766 33.9824 -16.791 c
f*U
*u
0 D
17.585 -14.0879 m
17.3662 -14.9063 16.7617 -17.0498 16.7881 -17.8057 c
16.7705 -18.9678 17.5615 -19.0508 18.5313 -19.3086 c
18.3701 -19.9141 L
16.9209 -19.626 15.4404 -19.8164 14.0264 -19.7646 c
13.9873 -18.8135 14.1572 -17.6885 14.4775 -16.6045 c
14.418 -16.5889 L
13.1367 -18.2275 11.2979 -19.0352 9.2061 -18.4805 c
8.2646 -18.2295 7.1738 -17.4512 7.4736 -16.3311 c
7.626 -15.7549 8.249 -15.3672 8.8252 -15.5215 c
10.0986 -15.8594 9.4053 -17.3633 10.5889 -17.6787 c
11.498 -17.9219 12.7002 -17.4307 13.3564 -16.792 c
14.3857 -15.7344 14.7813 -14.251 15.1523 -12.8555 c
15.9521 -9.8535 L
16.542 -7.6406 16.9775 -6.9785 14.4639 -6.1768 c
14.625 -5.5723 L
15.7705 -5.9082 16.9365 -6.2832 18.0791 -6.623 c
19.2705 -6.9072 20.4385 -7.1533 21.6289 -7.4385 c
21.4678 -8.0449 L
19.1533 -7.5889 19.1113 -8.3584 18.5791 -10.3584 C
17.585 -14.0879 l
f*U
*u
-5.9849 -7.7451 m
-6.334 -7.7803 -6.4204 -8.1826 -6.5435 -8.5068 c
-7.3018 -10.5 -7.6616 -11.9746 -5.2573 -12.8887 c
-3.79 -13.4473 -2.5439 -13.7881 -1.8643 -12.2666 c
-1.5596 -11.6436 -0.9336 -11.1445 -0.2002 -11.4219 c
0.4443 -11.6689 0.7578 -12.2559 0.5117 -12.9023 c
-0.3135 -15.0723 -4.3701 -14 -5.8652 -13.4297 c
-9.1211 -12.1895 -10.292 -10.7725 -9.0088 -7.3994 c
-7.1675 -2.5605 L
-6.8896 -1.8271 -5.9458 0.2969 -7.0898 0.7324 c
-7.6763 0.9561 -8.1709 0.541 -8.6499 0.252 c
-9.0947 0.7568 L
-8.2573 1.5469 -6.793 2.1299 -5.7075 1.7168 c
-4.5059 1.2617 -3.8252 -0.0391 -3.9785 -1.3232 c
-2.1758 -0.7344 -0.1064 -0.4131 1.7119 -1.1064 c
3.2656 -1.6973 4.4033 -3.2051 3.7793 -4.8467 c
2.8408 -7.3086 -0.3467 -7.3047 -2.5459 -7.4424 C
-5.9849 -7.7451 l
f1 D
-5.9702 -6.9102 m
-3.8877 -6.7305 -0.1084 -6.8584 0.7842 -4.5117 c
1.1963 -3.4287 0.9131 -2.1445 -0.29 -1.6865 c
-1.4326 -1.251 -3.0283 -1.6514 -4.1514 -2.1309 C
-5.9702 -6.9102 l
f*U
*u
0 D
-14.8833 1.2666 m
-14.084 3.1768 -13.3799 3.8896 -15.5723 5.0596 c
-15.312 5.6309 L
-14.2119 5.0957 -13.1523 4.5459 -12.0791 4.0234 c
-11.0098 3.5703 -9.9546 3.1611 -8.8848 2.7109 c
-9.1445 2.1377 L
-11.3516 2.9688 -11.5205 2.2197 -12.3774 0.334 c
-17.3623 -10.6367 L
-17.6865 -11.3496 -18.478 -13.0908 -18.4653 -13.8213 c
-18.4463 -14.6914 -17.5645 -15.0234 -16.9458 -15.4082 c
-17.2056 -15.9814 L
-22.1914 -14.8174 L
-14.8833 1.2666 l
f*U
*u
-28.6997 4.8389 m
-27.688 5.6211 -25.6113 7.0908 -24.9883 8.1436 c
-24.2993 9.3047 -25.7231 10.04 -26.4854 10.5996 c
-26.1172 11.2217 L
-25.1353 10.6016 -24.1953 9.9717 -23.2134 9.3535 c
-22.2515 8.8203 -21.3022 8.3301 -20.3423 7.7969 c
-20.71 7.1768 L
-22.2632 7.8789 -23.1138 7.7988 -24.437 6.7939 c
-26.2178 5.5176 -27.9536 4.249 -29.7344 2.9707 c
-40.1538 -5.1875 L
-41.0713 -4.6416 L
-38.3916 12.2988 L
-38.2988 13.1934 -37.9165 15.1924 -38.0347 16.1006 c
-38.1636 17.2344 -38.9092 17.8242 -39.7632 18.4756 c
-39.395 19.0957 L
-38.1421 18.3164 -36.8789 17.4951 -35.6265 16.7148 c
-34.3154 15.9736 -32.9604 15.2441 -31.6494 14.502 c
-32.0181 13.8828 L
-32.7891 14.3027 -34.0806 15.1416 -34.7031 14.0889 c
-35.105 13.4141 -35.2871 12.4297 -35.4131 11.6641 c
-36.0093 8.2598 L
-29.3428 4.3066 L
-28.6997 4.8389 l
f1 D
-36.1699 7.1875 m
-37.7153 -2.1836 L
-30.2056 3.6514 L
-36.1699 7.1875 l
f*U
*u
0 D
-49.2642 12.5928 m
-49.3149 12.6299 L
-51.2368 11.9844 -52.957 12.085 -54.5972 13.2988 c
-57.9253 15.7627 -58.3472 19.9404 -55.9209 23.2188 c
-53.6431 26.2939 -49.4697 27.1885 -46.292 24.8359 c
-44.8032 23.7344 -44.0806 22.498 -43.7236 20.709 c
-40.1035 25.6016 L
-38.7593 27.4189 -38.0967 27.9424 -40.1411 29.6104 c
-39.7676 30.1172 L
-38.8535 29.4014 -37.9575 28.6602 -37.043 27.9443 c
-36.0151 27.2227 -34.9692 26.5254 -33.9419 25.8037 c
-34.3154 25.3008 L
-36.3003 26.5742 -36.6152 25.8301 -37.8477 24.166 c
-45.1641 14.2813 L
-45.688 13.5752 -46.9941 11.8086 -47.2979 11.1357 c
-47.7676 10.0791 -47.0112 9.6768 -46.2051 9.0781 c
-46.5776 8.5742 L
-47.9697 9.3301 -49.4482 9.918 -50.814 10.5 C
-49.2642 12.5928 l
f1 D
-46.0391 17.583 m
-45.4053 18.4404 -44.4893 19.6768 -44.5591 20.7422 c
-44.6353 21.8525 -45.376 22.9072 -46.2842 23.5801 c
-49.0078 25.5957 -51.7749 23.5459 -53.4551 21.2744 c
-55.1533 18.9814 -56.3447 15.8418 -53.5957 13.8076 c
-52.5366 13.0225 -51.187 12.8428 -49.9844 13.3584 c
-48.7827 13.875 -48.1294 14.7578 -47.3643 15.793 C
-46.0391 17.583 l
f*U
*u
0 D
-69.2158 34.8271 m
-66.3901 37.9824 -61.8721 37.8525 -58.811 35.1094 c
-55.7729 32.3877 -55.2969 27.7471 -58.0596 24.6621 c
-60.7397 21.6719 -65.4453 21.9697 -68.2949 24.5234 c
-71.1929 27.1191 -71.9175 31.8105 -69.2158 34.8271 c
f1 D
-60.3125 26.8506 m
-58.3232 29.0713 -56.6758 32.2275 -59.4092 34.6768 c
-61.9565 36.959 -64.8901 34.9531 -66.7539 32.874 c
-68.7637 30.6309 -70.4771 27.4482 -67.7197 24.9775 c
-65.1733 22.6953 -62.1343 24.8184 -60.3125 26.8506 c
f*U
*u
0 D
-66.1133 41.6396 m
-65.8955 41.4141 L
-69.0464 38.2168 L
-69.4805 38.6699 L
-68.3794 40.4219 -67.6919 42.5615 -69.3003 44.2344 c
-70.2559 45.2314 -71.624 45.6572 -72.71 44.6152 c
-74 43.377 -73.2607 41.5645 -72.8237 40.1123 c
-72.2422 38.1475 -71.6421 36.0283 -73.3408 34.3984 c
-74.9014 32.8994 -77.2505 33.0352 -78.751 34.5977 c
-79.4233 35.2998 -80.0464 36.3545 -80.292 37.3369 c
-81.27 37.2666 L
-81.5308 37.5391 L
-78.6582 40.21 L
-78.2236 39.7568 L
-78.9634 38.2627 -79.6855 36.6133 -78.3169 35.1865 c
-77.5996 34.4395 -76.4961 34.1523 -75.6807 34.9346 c
-74.5044 36.0645 -75.2915 37.7012 -75.6416 39.0166 c
-76.3267 41.3594 -77.1064 43.3516 -75.0703 45.3066 c
-73.2139 47.0889 -70.5615 46.5908 -68.8882 44.8486 c
-68.0625 43.9883 -67.4214 42.7764 -67.3115 41.5762 C
-66.1133 41.6396 l
f*U
*u
-83.2046 41.3838 m
-83.6333 41.0146 L
-85.3452 41.6133 -87.3208 41.9863 -89.106 41.3213 c
-89.4131 41.6787 L
-86.627 44.0703 L
-88.9565 46.7832 L
-88.3145 47.334 L
-85.9844 44.6211 L
-79.1992 50.4453 L
-78.1279 51.3652 -77.1919 52.54 -78.2759 53.8008 c
-78.9907 54.6367 -79.8354 54.6553 -80.8184 54.5977 c
-80.877 55.29 L
-79.3667 55.8418 -77.9634 54.9795 -76.9819 53.835 c
-75.5107 52.1221 -75.1768 50.3828 -76.9619 48.8506 c
-84.2476 42.5977 L
-83.2046 41.3838 l
f*U
*u
-91.5674 57.9063 m
-91.8813 58.0615 -92.1704 57.7676 -92.4453 57.5605 c
-94.1528 56.2793 -95.2441 55.2256 -93.6997 53.167 c
-92.7573 51.9121 -91.8853 50.959 -90.499 51.8818 c
-89.9092 52.2461 -89.1123 52.334 -88.6416 51.7051 c
-88.2275 51.1553 -88.2778 50.4893 -88.8306 50.0752 c
-90.687 48.6807 -93.5425 51.7559 -94.5029 53.0342 c
-96.5933 55.8203 -96.8252 57.6475 -93.9395 59.8125 c
-89.7988 62.9189 L
-89.1714 63.3896 -87.2397 64.6836 -87.9741 65.6631 c
-88.3506 66.165 -88.9907 66.0762 -89.5483 66.0889 c
-89.6563 66.7539 L
-88.5264 66.9736 -86.9756 66.6855 -86.2793 65.7578 c
-85.5073 64.7285 -85.6255 63.2656 -86.4419 62.2627 c
-84.6035 61.7988 -82.6821 60.9648 -81.5156 59.4082 c
-80.5171 58.0771 -80.3599 56.1953 -81.7646 55.1406 c
-83.873 53.5596 -86.5654 55.2666 -88.498 56.3252 C
-91.5674 57.9063 l
f1 D
-91.1104 58.6016 m
-89.252 57.6436 -86.1265 55.5166 -84.1187 57.0225 c
-83.1904 57.7197 -82.7446 58.957 -83.5166 59.9863 c
-84.2515 60.9648 -85.8145 61.4775 -87.0186 61.6729 C
-91.1104 58.6016 l
f*U
*u
0 D
-94.2817 70.2734 m
-92.585 71.4619 -91.6084 71.6914 -92.8384 73.8486 c
-92.3145 74.1934 L
-91.6685 73.1523 -91.0659 72.1211 -90.4365 71.1074 c
-89.7739 70.1543 -89.1011 69.2461 -88.437 68.293 c
-88.9614 67.9492 L
-90.3853 69.8301 -90.9282 69.2852 -92.6587 68.1465 c
-102.728 61.5313 L
-103.3838 61.1006 -104.9834 60.0469 -105.3613 59.4258 c
-105.8101 58.6777 -105.2407 57.9277 -104.9229 57.2715 c
-105.4473 56.9277 L
-109.0435 60.5723 L
-94.2817 70.2734 l
f*U
*u
-101.8423 77.5771 m
-102.1787 78.2148 L
-99.6689 80.249 -98.1011 82.9893 -99.7842 86.1836 c
-100.9263 88.3486 -103.0991 89.5068 -105.3467 88.3213 c
-107.8721 86.9893 -107.7144 84.2705 -107.4502 81.8193 c
-107.0898 78.7832 -107.002 75.3877 -110.1655 73.7197 c
-113.3291 72.0488 -116.4634 73.5527 -118.0596 76.5781 c
-118.8652 78.1035 -119.0835 79.7979 -118.854 81.5137 c
-120.2729 81.582 L
-120.4351 81.8867 L
-115.7061 84.5586 L
-115.3696 83.9199 L
-117.3369 82.0664 -118.73 79.666 -117.3096 76.9736 c
-116.3726 75.1973 -114.4595 74.3262 -112.6558 75.2783 c
-110.4634 76.4346 -110.7529 78.7998 -110.9395 80.9004 c
-111.269 84.417 -111.5234 88.3975 -107.8892 90.3154 c
-104.2524 92.2324 -100.7188 89.7705 -99.0059 86.5234 c
-98.0103 84.6367 -97.7891 82.8711 -98.1084 80.7871 c
-96.5908 80.7354 L
-96.4312 80.4316 L
-101.8423 77.5771 l
f*U
*u
-114.4727 98.375 m
-114.7402 98.6025 -115.0903 98.3857 -115.4087 98.249 c
-117.3721 97.4141 -118.6831 96.6494 -117.6743 94.2822 c
-117.0596 92.8408 -116.4395 91.707 -114.873 92.2705 c
-114.2129 92.4824 -113.4185 92.3789 -113.1108 91.6582 c
-112.8408 91.0215 -113.0479 90.3877 -113.6831 90.1172 c
-115.8193 89.209 -117.8589 92.874 -118.4868 94.3467 c
-119.8511 97.5508 -119.6411 99.3789 -116.3223 100.7939 c
-111.5586 102.8232 L
-110.8369 103.1309 -108.6523 103.9258 -109.1318 105.0498 c
-109.3774 105.6279 -110.021 105.6963 -110.5596 105.8398 c
-110.5059 106.5107 L
-109.355 106.4561 -107.9185 105.8066 -107.4634 104.7393 c
-106.9595 103.5537 -107.4238 102.1631 -108.4551 101.3828 c
-106.7803 100.4932 -105.1152 99.2256 -104.3525 97.4355 c
-103.7012 95.9043 -103.9966 94.0391 -105.6138 93.3506 c
-108.0386 92.3174 -110.2461 94.6162 -111.8701 96.1084 C
-114.4727 98.375 l
f1 D
-113.8618 98.9424 m
-112.2871 97.5684 -109.7593 94.7568 -107.4497 95.7412 c
-106.3818 96.1943 -105.6538 97.29 -106.1597 98.4717 c
-106.6387 99.5996 -108.0332 100.4707 -109.1567 100.9473 C
-113.8618 98.9424 l
f*U
*u
0 D
-117.1816 120.292 m
-115.2124 120.9307 -114.2397 120.9814 -114.8442 123.3574 c
-114.2471 123.5518 L
-113.9292 122.4678 -113.6304 121.3438 -113.312 120.2598 c
-112.9058 119.1045 -112.479 117.9893 -112.0713 116.835 c
-112.6689 116.6406 L
-113.543 118.832 -114.2109 118.4502 -116.1812 117.8125 c
-120.002 116.5742 L
-122.061 115.9072 -125.0156 115.0498 -124.0977 112.2129 c
-123.3428 109.8857 -121.0386 108.9834 -118.8604 109.6904 c
-114.2324 111.1885 L
-112.2627 111.8262 -111.2803 111.8477 -111.895 114.2539 c
-111.2979 114.4463 L
-110.9795 113.3633 -110.6821 112.2383 -110.3633 111.1553 c
-109.9565 110.001 -109.5293 108.8848 -109.1226 107.7305 c
-109.7192 107.5381 L
-110.5933 109.7285 -111.2622 109.3477 -113.2314 108.71 c
-116.9038 107.5186 L
-117.7397 107.248 -119.8286 106.5713 -120.4668 106.2002 c
-121.4639 105.6123 -121.0835 104.8457 -120.7744 103.8906 c
-121.3711 103.6982 L
-122.0537 105.1924 -122.8877 106.1416 -123.6313 107.5176 c
-121.0396 108.7852 L
-121.0591 108.8438 L
-123.249 109.2891 -124.6362 110.6211 -125.3223 112.7402 c
-126.2412 115.5771 -125.4805 117.6035 -122.6445 118.5225 C
-117.1816 120.292 l
f*U
*u
-126.7798 122.6748 m
-127.3291 122.542 L
-128.5825 123.8525 -130.1704 125.085 -132.064 125.3037 c
-132.1738 125.7617 L
-128.606 126.623 L
-129.4448 130.1006 L
-128.6221 130.2998 L
-127.7817 126.8232 L
-119.0894 128.9229 L
-117.7168 129.2539 -116.3501 129.874 -116.7407 131.4912 c
-116.9985 132.5596 -117.7412 132.96 -118.6445 133.3564 c
-118.3794 134 L
-116.7832 133.8057 -115.9268 132.3984 -115.5728 130.9336 c
-115.043 128.7383 -115.5366 127.0371 -117.8228 126.4854 c
-127.1558 124.2305 L
-126.7798 122.6748 l
f*U
*u
-136.146 132.4209 m
-137.0713 132.2451 -137.9507 132.8447 -138.127 133.7676 c
-138.3018 134.6943 -137.6958 135.543 -136.7715 135.7178 c
-135.8779 135.8867 -135.0029 135.3193 -134.8398 134.4561 c
-134.6636 133.5313 -135.1909 132.6016 -136.146 132.4209 c
f-131.2905 136.79 m
-121.3945 138.665 L
-119.3721 139.1123 -118.3823 138.9492 -118.6899 141.415 c
-118.0732 141.5313 L
-117.9053 140.4775 -117.751 139.3252 -117.5713 138.208 c
-117.3125 137.0117 -117.0234 135.8213 -116.7646 134.625 c
-117.3809 134.5078 L
-117.9678 136.7598 -118.6724 136.4346 -120.7134 136.0791 c
-125.1211 135.2461 L
-125.707 135.1328 -128.0806 134.6836 -128.519 134.4727 c
-129.25 134.1104 -128.9419 132.8262 -128.7949 132.2168 c
-129.4111 132.0996 L
-131.2905 136.79 l
f*U
*u
-127.9443 150.0371 m
-128.1387 150.3271 -128.5361 150.2168 -128.8779 150.1738 c
-130.9956 149.9082 -132.4663 149.5322 -132.1465 146.9805 c
-131.9517 145.4238 -131.667 144.1631 -130.0049 144.2764 c
-129.313 144.2988 -128.5776 143.9805 -128.4795 143.2021 c
-128.3936 142.5176 -128.7666 141.9648 -129.4517 141.8799 c
-131.7559 141.5908 -132.7104 145.6768 -132.9092 147.2646 c
-133.3418 150.7188 -132.6387 152.4219 -129.0576 152.8691 c
-123.9209 153.5127 L
-123.1426 153.6104 -120.8228 153.7744 -120.9756 154.9883 c
-121.0532 155.6104 -121.6528 155.8516 -122.1313 156.1396 c
-121.895 156.7695 L
-120.8042 156.4014 -119.6021 155.3828 -119.457 154.2305 c
-119.2979 152.9531 -120.1265 151.7422 -121.3325 151.2764 c
-119.9663 149.9609 -118.7134 148.2832 -118.4712 146.3535 c
-118.2642 144.7041 -119.061 142.9902 -120.8052 142.7725 c
-123.4199 142.4453 -124.9111 145.2627 -126.064 147.1416 C
-127.9443 150.0371 l
f1 D
-127.2012 150.4141 m
-126.064 148.6592 -124.4053 145.2627 -121.9155 145.5742 c
-120.7627 145.7178 -119.7622 146.5723 -119.9233 147.8477 c
-120.0747 149.0615 -121.1763 150.2832 -122.1265 151.0498 C
-127.2012 150.4141 l
f*U
*u
0 D
-121.9248 164.5996 m
-121.8115 167.8076 -121.8306 171.1992 -117.6304 171.3779 c
-113.6494 171.5498 -112.2056 167.9053 -112.0591 164.4893 c
-111.9473 161.8857 -112.686 157.8672 -115.9463 157.7275 c
-117.2319 157.6729 -118.5898 158.5869 -118.647 159.9355 c
-118.6704 160.4678 -118.4683 160.8838 -118.1392 161.2754 c
-117.9077 160.251 -116.8164 159.7002 -115.8447 159.7402 c
-113.1172 159.8574 -112.7041 162.6709 -112.7979 164.8652 c
-112.8911 167.0596 -113.9341 169.4014 -116.4731 169.293 c
-119.5459 169.1611 -119.2407 165.7188 -119.2739 163.5518 c
-119.2471 161.4805 -119.062 158.6309 -121.8838 158.5088 c
-123.3892 158.4453 -124.4521 159.8125 -124.6982 161.1514 c
-124.7607 161.1494 L
-125.2783 159.3057 -126.9365 157.6963 -128.9429 157.6104 c
-132.2661 157.4678 -134.1733 160.2109 -134.3052 163.2832 c
-134.3672 164.7275 -133.9907 166.2188 -133.0645 167.3262 c
-133.7593 168.1426 -134.4634 169.1816 -134.5117 170.3096 c
-134.5469 171.125 -134.2144 172.1758 -133.2432 172.2158 c
-132.6782 172.2422 -132.1899 171.8213 -132.1636 171.2266 c
-132.123 170.2559 -133.2148 170.1143 -133.1743 169.1436 c
-133.1548 168.7041 -132.8198 168.2148 -132.5234 167.8828 c
-131.7095 168.6719 -130.6279 169.0938 -129.5 169.1436 c
-125.8008 169.2998 -124.6152 166.5576 -124.3208 163.335 c
-124.249 162.3955 -124.146 159.9824 -122.8599 160.0381 c
-121.7627 160.084 -121.9619 161.8027 -121.9292 162.4951 C
-121.9248 164.5996 l
f1 D
-129.3857 166.4775 m
-131.3916 166.3916 -133.6792 165.54 -133.5771 163.1592 c
-133.4741 160.7441 -131.0952 160.1855 -129.1187 160.2715 c
-127.2393 160.3506 -124.9512 161.2031 -125.0483 163.4609 c
-125.1514 165.875 -127.3477 166.5645 -129.3857 166.4775 c
f*U
*u
0 D
-126.9316 188.9775 m
-122.7002 188.7896 -119.9395 185.2114 -120.1226 181.1045 c
-120.3047 177.0303 -123.5933 173.7227 -127.7314 173.9072 c
-131.7427 174.0859 -134.4927 177.9155 -134.3218 181.7388 c
-134.1484 185.626 -130.9751 189.1582 -126.9316 188.9775 c
f1 D
-127.4658 177.0352 m
-124.4873 176.9023 -120.9995 177.626 -120.8364 181.2939 c
-120.6836 184.7104 -124.0942 185.7104 -126.8843 185.8345 c
-129.8931 185.9697 -133.4414 185.2803 -133.6064 181.5811 c
-133.7593 178.1646 -130.1919 177.1572 -127.4658 177.0352 c
f*U
*u
0 D
-115.5913 190.9233 m
-116.4053 192.4033 -117.6812 194.5361 -119.6768 194.4756 c
-119.4932 194.1392 -119.3999 193.8447 -119.4424 193.4712 c
-119.5508 192.5039 -120.2822 191.8906 -121.249 192.0005 c
-122.2153 192.1079 -122.8491 192.9365 -122.7402 193.9038 c
-122.5757 195.3687 -121.1479 195.9976 -119.8071 195.8467 c
-116.9077 195.522 -116.1538 193.5117 -114.9609 191.1992 C
-115.5913 190.9233 l
f*U
*u
-132.0278 209.8398 m
-133.0132 210.0337 -135.291 210.4805 -136.1831 210.3359 c
-137.3091 210.1411 -137.5566 208.8789 -137.749 207.8936 c
-138.4575 208.0322 L
-138.1377 209.5039 -137.7856 210.9697 -137.4639 212.4414 c
-137.1865 214.0186 -136.9468 215.5703 -136.6753 217.1147 c
-135.9673 216.9766 L
-136.1606 215.9917 -136.4082 214.7285 -135.4404 214.123 c
-134.6694 213.6523 -132.3911 213.2041 -131.4048 213.0117 c
-122.7236 211.3071 L
-121.7383 211.1138 -119.459 210.6665 -118.5684 210.811 c
-117.4434 211.0068 -117.1948 212.2686 -117.001 213.2539 c
-116.293 213.1147 L
-116.6079 211.6738 -116.9658 210.1772 -117.2861 208.7056 c
-117.5576 207.1602 -117.8047 205.5781 -118.0762 204.0327 c
-118.7847 204.1719 L
-118.5903 205.1567 -118.3423 206.4185 -119.311 207.0249 c
-120.082 207.4951 -122.3613 207.9429 -123.3452 208.1362 C
-132.0278 209.8398 l
f*U
*u
-115.8066 229.7021 m
-113.8125 229.1421 -112.9736 228.6465 -112.1621 230.9609 c
-111.5576 230.791 L
-111.8931 229.7124 -112.2666 228.6113 -112.6021 227.5322 c
-112.9023 226.3462 -113.1636 225.1807 -113.4639 223.9941 c
-114.0684 224.1631 L
-113.5835 226.4717 -114.3511 226.5239 -116.3457 227.0835 c
-120.2119 228.167 L
-122.2964 228.7515 -125.2324 229.6724 -126.0366 226.8022 c
-126.6973 224.4463 -125.2783 222.418 -123.0728 221.8003 c
-118.3901 220.4873 L
-116.396 219.9282 -115.5664 219.4014 -114.7456 221.7471 c
-114.1416 221.5767 L
-114.4771 220.498 -114.8506 219.397 -115.1865 218.3179 c
-115.4854 217.1318 -115.7476 215.9658 -116.0479 214.7793 c
-116.6519 214.9487 L
-116.168 217.2568 -116.9351 217.3096 -118.9287 217.8687 c
-122.6445 218.9102 L
-123.4902 219.1475 -125.6045 219.7402 -126.3423 219.7837 c
-127.498 219.8472 -127.6055 218.998 -127.877 218.0313 c
-128.4814 218.2002 L
-128.2217 219.8218 -128.3916 221.0752 -128.2485 222.6323 c
-125.3887 222.2544 L
-125.3726 222.3145 L
-126.9492 223.8979 -127.3677 225.7739 -126.7666 227.9185 c
-125.9619 230.7891 -124.2051 232.0571 -121.3345 231.2515 C
-115.8066 229.7021 l
f*U
*u
-108.478 244.7432 m
-107.417 242.9341 -107.4487 240.6318 -108.1699 238.7227 c
-109.5439 235.084 -113.1367 233.3882 -116.7769 234.7637 c
-120.8848 236.3159 -122.6738 240.5479 -121.1333 244.6274 c
-120.7007 245.7725 -119.3384 248.3101 -117.7251 247.7002 c
-117.1968 247.5 -116.8047 246.8491 -117.0049 246.3208 c
-117.2705 245.6167 -118.0024 245.457 -118.6372 245.4614 c
-119.6509 245.4424 -119.9746 245.2964 -120.3843 244.2095 c
-121.5825 241.041 -118.7197 238.8521 -116.1362 237.8765 c
-113.3193 236.8115 -110.04 236.6123 -108.7876 239.9292 c
-108.2329 241.3965 -108.5083 242.9771 -109.2383 244.3257 C
-108.478 244.7432 l
f*U
*u
-105.5552 262.1543 m
-101.7334 260.3276 -100.5889 255.9561 -102.3608 252.2466 c
-104.1187 248.5669 -108.4375 246.8047 -112.1748 248.5898 c
-115.7988 250.3213 -116.8359 254.9194 -115.1851 258.374 c
-113.5078 261.8838 -109.208 263.8994 -105.5552 262.1543 c
f1 D
-110.7085 251.3672 m
-108.019 250.0825 -104.5264 249.3867 -102.9438 252.6997 c
-101.4697 255.7852 -104.2183 258.0376 -106.7378 259.2417 c
-109.4556 260.54 -112.9927 261.29 -114.5874 257.9497 c
-116.0625 254.8643 -113.1714 252.5444 -110.7085 251.3672 c
f*U
*u
0 D
-103.8096 266.4844 m
-104.5435 266.9097 -106.4551 268.0527 -107.1899 268.2246 c
-108.3086 268.5459 -108.5928 267.8042 -109.0967 266.9355 c
-109.6396 267.25 L
-108.9814 268.5728 -108.7788 270.0503 -108.3589 271.4023 c
-107.4292 271.1909 -106.3892 270.7334 -105.4282 270.1406 c
-105.3955 270.1943 L
-106.6436 271.8599 -106.9434 273.8462 -105.8584 275.7197 c
-105.3716 276.5615 -104.334 277.4121 -103.3301 276.8301 c
-102.814 276.5317 -102.6035 275.8291 -102.9033 275.3135 c
-103.563 274.1738 -104.833 275.2354 -105.4473 274.1768 c
-105.9189 273.3618 -105.7578 272.0728 -105.3159 271.2725 c
-104.564 270.0029 -103.2339 269.2324 -101.9854 268.5098 c
-99.2964 266.9531 L
-97.3149 265.8057 -96.7886 265.21 -95.3599 267.4277 c
-94.8159 267.1138 L
-95.4409 266.0972 -96.1089 265.0698 -96.7334 264.0547 c
-97.3188 262.9795 -97.8628 261.9165 -98.4482 260.8413 c
-98.9917 261.1558 L
-97.9482 263.2715 -98.6787 263.5127 -100.4707 264.5508 C
-103.8096 266.4844 l
f*U
*u
-99.2622 281.2432 m
-99.2266 281.2949 L
-99.9336 283.1968 -99.8857 284.9185 -98.7246 286.5957 c
-96.3677 290.001 -92.2061 290.5542 -88.853 288.2324 c
-85.7046 286.0537 -84.6816 281.9106 -86.9312 278.6602 c
-87.9849 277.1392 -89.1997 276.376 -90.9741 275.9634 c
-85.9692 272.4985 L
-84.1113 271.2124 -83.5659 270.5684 -81.9624 272.6631 c
-81.4468 272.3062 L
-82.1323 271.3691 -82.8452 270.4512 -83.5322 269.5146 c
-84.2202 268.4644 -84.8838 267.3965 -85.5723 266.3477 c
-86.0879 266.7041 L
-84.8779 268.728 -85.6299 269.02 -87.332 270.1982 c
-97.4443 277.2002 L
-98.167 277.6997 -99.9727 278.9502 -100.6553 279.2319 c
-101.7271 279.6685 -102.1064 278.8999 -102.6782 278.0742 c
-103.1934 278.4321 L
-102.4814 279.8462 -101.9409 281.3433 -101.4033 282.7261 C
-99.2622 281.2432 l
f1 D
-94.1719 278.1777 m
-93.2959 277.5708 -92.0308 276.6963 -90.9678 276.7998 c
-89.8599 276.9102 -88.8286 277.6846 -88.1855 278.6123 c
-86.2578 281.3979 -88.3936 284.0996 -90.7158 285.7061 c
-93.063 287.3315 -96.2383 288.4233 -98.1846 285.6113 c
-98.9346 284.5288 -99.0718 283.1724 -98.5181 281.9878 c
-97.9648 280.8027 -97.0625 280.1782 -96.0034 279.4458 C
-94.1719 278.1777 l
f*U
*u
0 D
-77.6709 301.8896 m
-74.4277 299.1641 -74.4155 294.645 -77.0596 291.498 c
-79.6851 288.3755 -84.3071 287.7524 -87.478 290.4175 c
-90.5518 293.002 -90.4028 297.7134 -87.9399 300.6436 c
-85.437 303.6216 -80.7695 304.4941 -77.6709 301.8896 c
f1 D
-85.3623 292.7393 m
-83.0815 290.8213 -79.873 289.272 -77.5112 292.0825 c
-75.311 294.7002 -77.4087 297.5698 -79.5449 299.3667 c
-81.8511 301.3052 -85.0854 302.918 -87.4678 300.083 c
-89.6694 297.4658 -87.4531 294.4951 -85.3623 292.7393 c
f*U
*u
0 D
-74.8994 305.6465 m
-75.5029 306.2393 -77.0693 307.8252 -77.7373 308.1753 c
-78.7402 308.7661 -79.2007 308.1187 -79.9058 307.4043 c
-80.353 307.8438 L
-79.3848 308.9604 -78.8188 310.3403 -78.0737 311.5449 c
-77.2271 311.1079 -76.334 310.4048 -75.5513 309.5898 c
-75.5073 309.6343 L
-76.2993 311.5586 -76.0928 313.5576 -74.5747 315.1001 c
-73.8921 315.7925 -72.6758 316.3574 -71.8491 315.543 c
-71.4238 315.1245 -71.396 314.3926 -71.814 313.9678 c
-72.7383 313.0298 -73.7031 314.3745 -74.562 313.5029 c
-75.2222 312.832 -75.3896 311.5435 -75.1602 310.6577 c
-74.75 309.2412 -73.6543 308.1626 -72.6255 307.1499 c
-70.4121 304.9712 L
-68.7803 303.3643 -68.4194 302.6572 -66.4805 304.4478 c
-66.0347 304.0073 L
-66.8921 303.1792 -67.7959 302.3516 -68.6548 301.5244 c
-69.4902 300.6299 -70.2822 299.7358 -71.1187 298.8418 c
-71.5654 299.2822 L
-70.0264 301.0698 -70.6729 301.4858 -72.1484 302.9385 C
-74.8994 305.6465 l
f*U
*u
-62.1953 319.2729 m
-62.064 319.5991 -62.3799 319.8638 -62.6084 320.1221 c
-64.0166 321.7251 -65.1533 322.731 -67.085 321.0327 c
-68.2627 319.9966 -69.1455 319.0532 -68.1182 317.7417 c
-67.71 317.1826 -67.5605 316.395 -68.1499 315.876 c
-68.6685 315.4209 -69.3345 315.4189 -69.7915 315.938 c
-71.3237 317.6816 -68.4805 320.7661 -67.2788 321.8237 c
-64.6631 324.1235 -62.8599 324.4971 -60.4775 321.7866 c
-57.0591 317.8989 L
-56.5415 317.3091 -55.1025 315.4834 -54.1836 316.291 c
-53.7129 316.7051 -53.8501 317.3364 -53.8794 317.8945 c
-53.2251 318.0522 L
-52.9189 316.9438 -53.0859 315.3755 -53.9575 314.6089 c
-54.9238 313.7598 -56.3911 313.7656 -57.4551 314.5 c
-57.7759 312.6318 -58.4585 310.6519 -59.9194 309.3682 c
-61.1685 308.27 -63.0332 307.9668 -64.1929 309.2856 c
-65.9336 311.2656 -64.4414 314.0815 -63.5332 316.0913 C
-62.1953 319.2729 l
f1 D
-61.4653 318.8716 m
-62.2783 316.9448 -64.1563 313.6636 -62.499 311.7783 c
-61.7329 310.9067 -60.4648 310.5586 -59.499 311.4077 c
-58.5801 312.2158 -58.189 313.8145 -58.0879 315.0298 C
-61.4653 318.8716 l
f*U
*u
0 D
-58.8086 327.1792 m
-59.1533 327.627 L
-58.4648 329.3047 -57.9868 331.2559 -58.5552 333.0752 c
-58.1816 333.3628 L
-55.9429 330.4531 L
-53.1084 332.6338 L
-52.5923 331.9614 L
-55.4268 329.7803 L
-49.9746 322.6934 L
-49.1133 321.5737 -47.9912 320.5781 -46.6729 321.5913 c
-45.8027 322.2612 -45.7368 323.1025 -45.7437 324.0884 c
-45.0464 324.1084 L
-44.5757 322.5708 -45.5137 321.2168 -46.707 320.2983 c
-48.4976 318.9209 -50.252 318.6797 -51.687 320.5444 c
-57.5405 328.1553 L
-58.8086 327.1792 l
f*U
*u
-34.4077 332.0713 m
-34.624 329.7383 -35.6157 328.0591 -37.5732 326.7539 c
-40.8096 324.5942 -44.9863 325.0879 -47.2163 328.4282 c
-49.3926 331.6914 -48.8809 336.2954 -45.4883 338.5586 c
-42.9302 340.2656 -39.5454 340.4492 -37.665 337.6309 c
-37.4375 337.291 -37.8989 337.1343 -38.1606 336.9604 c
-45.6509 331.9624 L
-44.9194 330.6406 L
-43.2646 328.1606 -40.1143 326.2651 -37.3213 328.1274 c
-35.9907 329.0161 -35.4082 330.6875 -35.3213 332.2539 C
-34.4077 332.0713 l
f1 D
-41.6836 335.6279 m
-41.2666 335.9058 -40.3179 336.3496 -40.7539 337.0029 c
-41.833 338.6206 -43.4175 339.0732 -45.061 337.9756 c
-47.0195 336.6699 -46.8091 334.6602 -45.9902 332.7544 C
-41.6836 335.6279 l
f*U
*u
0 D
-20.1733 337.0283 m
-20.8223 337.4966 -21.3774 338.1221 -21.8657 338.8208 c
-22.2686 336.7422 -23.1479 335.4048 -25.02 334.3823 c
-28.4907 332.4893 -32.3452 333.8535 -34.2085 337.2686 c
-36.0425 340.6294 -35.3267 344.9512 -31.8281 346.8599 c
-30.314 347.6865 -28.5801 347.917 -26.958 347.3008 c
-29.332 351.6533 L
-30.2339 353.3057 -30.7983 354.1416 -32.8105 353.1152 c
-33.1108 353.666 L
-29.1855 356.9517 L
-21.5962 343.043 L
-21.1753 342.2715 -20.4238 340.8945 -19.7583 340.3286 c
-18.8735 339.5596 -18.1602 340.0205 -17.2778 340.502 c
-16.978 339.9507 L
-20.1733 337.0283 l
f1 D
-25.8765 345.3174 m
-26.8232 347.0532 -29.0894 347.2109 -30.686 346.3394 c
-33.6606 344.7158 -32.7612 341.168 -31.4536 338.7715 c
-30.1016 336.2935 -27.7397 333.8643 -24.7651 335.4878 c
-22.2866 336.8394 -22.5547 339.2314 -23.7422 341.4077 C
-25.8765 345.3174 l
f*U
1 To
1 0 0 1 -154.6382 -46.875 0 Tp
0 Tv
1 Ap
0 D
283.7842 -86.918 m
283.7842 -46.875 L
-154.6382 -46.875 L
-154.6382 -86.918 L
283.7842 -86.918 L
nTP
0 -21.75 Td
0 Tr
0 O
0.9294 0.1765 0.9961 0.051 k
%_ 0 50 XQ
/_TimesNewRomanPSMT 24 24 -7.3594 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
1 TA
%_ 0 XL
0 TY
0 TV
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
0 Ta
0 1 2 2 3 Th
0 Tq
0 Tg
0 0 Tl
0 Tc
0 Tw
(A) Tx 1 55 Tk
( Puerto Rican Expression of ) Tx 1 18 Tk
(Three Cultures) Tx 1 0 Tk
(\r) TX 
TO
ULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
